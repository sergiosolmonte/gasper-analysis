ctmc

//Ethereum pos 1 epochs=32 slots 
//slot= 12 sec
const int EpochSize = 32;
const double rMw=1; ///12.6; // delay blocchi
const epochs;
const double T=epochs*EpochSize*(1/p);
//const double T;
const int penality = 1;
const double rC = 1/(12*EpochSize);
const double rIst = 100;
const double rAdd = 1;  //1/5
const double r = 1; //delay rem block 1/10
const double p =1/12;
const double np = 1-p;

global oldFinCount: int init 0;
global finCount : int init 0;

//const percentageStakeAttack;
//const stakeAttack;

const double delayTAtt = 0;	//1/30

const K=1; 

const int HasherRes = 0;

const Wait = -1;
const int Start = 0;
const int Height = 1;
const int Winner = 2;
const int Lost = 3;
const int Move = 4;
const int Add = 5;
const int Vote = 6;
const int Check = 7;
const int Fin = 8;


const int N = 100;


module Validator0

	M0_STATE : [Start..Fin] init Start;
	b0 : block {m0,0;genesis,0};
	B0 : blockchain [{genesis,0;genesis,0}];
	c0 : [0..N] init 0;
	tmp0 : [0..3] init 0;
	votes0 : [0..1000] init 0;
	height0 : [0..N] init 0;
	lastFinalized0 : block {genesis,0;genesis,0};
	lastJustified0 : block {genesis,0;genesis,0};
  	lastCheck0 : block {genesis,0;genesis,0};
	heightCheckpoint0 : [0..N] init 0;
  	heightLast0 : [0..N] init 0;
	listCheckpoints0 : list [];
	lenListCheck0 : [0..N] init 0;
	numFinBlocks0 : [0..N] init 0;
	finalized0 : bool init false;
	created0 : bool init false;
	justified0 : bool init false;
	succAttack0 : bool init false;
    	maxHeight0 : [0..N] init 0;

  	[] (M0_STATE=Start)&(validatorID=0)  -> 1+ delayTAtt : (b0'=createB(lastJustified0,B0,c0))&(c0'=c0+1)&(M0_STATE'=Winner)&(validatorID'=-1)&(created0'=true);
  	[] (M0_STATE=Start)& (!(validatorID=0)) -> 1 : (M0_STATE'=Lost);
  	[] (M0_STATE=Start)&(!isEmpty(listCheckpoints0)) -> rC :  (lastCheck0'=extractCheckpoint(listCheckpoints0,lastCheck0))&(heightLast0'=getHeight(extractCheckpoint(listCheckpoints0,lastCheck0)))&(votes0'=calcVotes(voti,extractCheckpoint(listCheckpoints0,lastCheck0)))&(M0_STATE'=Check);

  	[addBlock0] (M0_STATE=Winner) -> rMw+delayTAtt: (B0'=addBlock(B0,b0))&(M0_STATE'=(mod(getHeight(b0),EpochSize)=0)?Vote:Start)&(height0'=getHeight(b0))&(created0'=true);
	//[] (created0=true) -> (created0'=false);
  	[] (M0_STATE=Lost)&(!isEmpty(set0)) -> 1 : (b0'=extractBlock(set0))&(M0_STATE'=Move);
  	[] (M0_STATE=Lost)&(isEmpty(set0)) -> 1 : (M0_STATE'=Start);

  	[extractBlock0] (M0_STATE=Move)&(canBeInserted(B0,b0)) -> 1:(B0'=addBlock(B0,b0))&(M0_STATE'=((mod(getHeight(b0),EpochSize)=0)&(getHeight(b0)>maxHeight0))?Vote:Start);
		[extractBlock0] (M0_STATE=Move)&(canBeInserted(B0,b0)) -> 1/penality:(B0'=addBlock(B0,b0))&(M0_STATE'=((mod(getHeight(b0),EpochSize)=0))?Vote:Start);

		[] (M0_STATE=Move)&(!canBeInserted(B0,b0)) -> rIst:(M0_STATE'=Start);

  	[voteBlock0] (M0_STATE=Vote) -> 1 : (maxHeight0'=getHeight(b0))&(listCheckpoints0'=addBlockSet(listCheckpoints0,b0))&(M0_STATE'=Start);

  	[] (M0_STATE=Check)&(votes0>=2/3*tot_stake)&(heightLast0=heightCheckpoint0+EpochSize) -> rIst : (numFinBlocks0'=numFinBlocks0+1)&(lastFinalized0'=lastJustified0)&(lastJustified0'=lastCheck0)&(succAttack0'=((!lastCheck0)=true)?true:false)&(heightCheckpoint0'=heightLast0)&(listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(B0'=updateHF(B0,lastJustified0))&(M0_STATE'=Fin)&(tmp0'=0)&(justified0'=true)&(finalized0'=true) & (finCount'= finCount +1);

  	[] (M0_STATE=Check)&(votes0>=2/3*tot_stake)&(heightLast0!=heightCheckpoint0+EpochSize)&(heightLast0>heightCheckpoint0) -> rIst : (lastJustified0'=lastCheck0)&(heightCheckpoint0'=heightLast0)&(succAttack0'=((!lastCheck0)=true)?true:false)&(listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(M0_STATE'=Start)&(tmp0'=0)&(B0'=updateJust(B0,lastJustified0))&(justified0'=true);
	[] (M0_STATE=Check)&((votes0<=2/3*tot_stake)&(heightLast0<=heightCheckpoint0)|((votes0>=2/3*tot_stake)&(heightLast0<=heightCheckpoint0))) -> rIst: (listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(M0_STATE'=Start)&(tmp0'=0);
	[] (M0_STATE=Check)&(votes0<=2/3*tot_stake)&(heightLast0>heightCheckpoint0) -> rIst: (M0_STATE'=Start)&(tmp0'=0);
	[finBlock0] (M0_STATE=Fin) -> 1:(finalized0'=false)&(justified0'=false)&(M0_STATE'=Start)&(created0'=false);

endmodule

module Validator1

	M1_STATE : [Start..Fin] init Start;
	b1 : block {m1,0;genesis,0};
	B1 : blockchain [{genesis,0;genesis,0}];
	c1 : [0..N] init 0;
	tmp1 : [0..3] init 0;
	votes1 : [0..1000] init 0;
	height1 : [0..N] init 0;
	lastFinalized1 : block {genesis,0;genesis,0};
	lastJustified1 : block {genesis,0;genesis,0};
  	lastCheck1 : block {genesis,0;genesis,0};
	heightCheckpoint1 : [0..N] init 0;
  	heightLast1 : [0..N] init 0;
	listCheckpoints1 : list [];
	lenListCheck1 : [0..N] init 0;
	numFinBlocks1 : [0..N] init 0;
	finalized1 : bool init false;
	justified1 : bool init false;
	created1 : bool init false;
	succAttack1 : bool init false;
    	maxHeight1 : [0..N] init 0;

  	[] (M1_STATE=Start)&(validatorID=1)  -> 1 + delayTAtt: (b1'=createB(lastJustified1,B1,c1))&(c1'=c1+1)&(M1_STATE'=Winner)&(validatorID'=-1)&(created1'=true);
  	[] (M1_STATE=Start)& (!(validatorID=1)) -> 1 : (M1_STATE'=Lost);
  	[] (M1_STATE=Start)&(!isEmpty(listCheckpoints1)) -> rC :  (lastCheck1'=extractCheckpoint(listCheckpoints1,lastCheck1))&(heightLast1'=getHeight(extractCheckpoint(listCheckpoints1,lastCheck1)))&(votes1'=calcVotes(voti,extractCheckpoint(listCheckpoints1,lastCheck1)))&(M1_STATE'=Check);

  	[addBlock1] (M1_STATE=Winner) -> rMw + delayTAtt: (B1'=addBlock(B1,b1))&(M1_STATE'=(mod(getHeight(b1),EpochSize)=0)?Vote:Start)&(height1'=getHeight(b1))&(created1'=true);
	//[] (created1=true) -> (created1'=false);

  	[] (M1_STATE=Lost)&(!isEmpty(set1)) -> 1 : (b1'=extractBlock(set1))&(M1_STATE'=Move);
  	[] (M1_STATE=Lost)&(isEmpty(set1)) -> 1 : (M1_STATE'=Start);

  	[extractBlock1] (M1_STATE=Move)&(canBeInserted(B1,b1)) -> 1:(B1'=addBlock(B1,b1))&(M1_STATE'=((mod(getHeight(b1),EpochSize)=0)&(getHeight(b1)>maxHeight1))?Vote:Start);
  	[] (M1_STATE=Move)&(!canBeInserted(B1,b1)) -> rIst:(M1_STATE'=Start);

  	[voteBlock1] (M1_STATE=Vote) -> 1 : (maxHeight1'=getHeight(b1))&(listCheckpoints1'=addBlockSet(listCheckpoints1,b1))&(M1_STATE'=Start);

  	[] (M1_STATE=Check)&(votes1>=2/3*tot_stake)&(heightLast1=heightCheckpoint1+EpochSize) -> rIst : (numFinBlocks1'=numFinBlocks1+1)&(lastFinalized1'=lastJustified1)&(lastJustified1'=lastCheck1)&(succAttack1'=((!lastCheck1)=true)?true:false)&(heightCheckpoint1'=heightLast1)&(listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(B1'=updateHF(B1,lastJustified1))&(M1_STATE'=Fin)&(tmp1'=0)&(justified1'=true)&(finalized1'=true) & (finCount'= finCount +1);

  	[] (M1_STATE=Check)&(votes1>=2/3*tot_stake)&(heightLast1!=heightCheckpoint1+EpochSize)&(heightLast1>heightCheckpoint1) -> rIst : (lastJustified1'=lastCheck1)&(heightCheckpoint1'=heightLast1)&(succAttack1'=((!lastCheck1)=true)?true:false)&(listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(M1_STATE'=Start)&(tmp1'=0)&(B1'=updateJust(B1,lastJustified1))&(justified1'=true);
	[] (M1_STATE=Check)&((votes1<=2/3*tot_stake)&(heightLast1<=heightCheckpoint1)|((votes1>=2/3*tot_stake)&(heightLast1<=heightCheckpoint1))) -> rIst: (listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(M1_STATE'=Start)&(tmp1'=0);
	[] (M1_STATE=Check)&(votes1<=2/3*tot_stake)&(heightLast1>heightCheckpoint1) -> rIst: (M1_STATE'=Start)&(tmp1'=0);
	[finBlock1] (M1_STATE=Fin) -> 1:(finalized1'=false)&(justified1'=false)&(M1_STATE'=Start)&(created1'=false);

endmodule

module Validator2

	M2_STATE : [Start..Fin] init Start;
	b2 : block {m2,0;genesis,0};
	B2 : blockchain [{genesis,0;genesis,0}];
	c2 : [0..N] init 0;
	tmp2 : [0..3] init 0;
	votes2 : [0..1000] init 0;
	height2 : [0..N] init 0;
	lastFinalized2 : block {genesis,0;genesis,0};
	lastJustified2 : block {genesis,0;genesis,0};
  	lastCheck2 : block {genesis,0;genesis,0};
	heightCheckpoint2 : [0..N] init 0;
  	heightLast2 : [0..N] init 0;
	listCheckpoints2 : list [];
	lenListCheck2 : [0..N] init 0;
	numFinBlocks2 : [0..N] init 0;
	finalized2 : bool init false;
	created2 : bool init false;
	justified2 : bool init false;
	succAttack2 : bool init false;
    	maxHeight2 : [0..N] init 0;

  	[] (M2_STATE=Start)&(validatorID=2)  -> 1+ delayTAtt: (b2'=createB(lastJustified2,B2,c2))&(c2'=c2+1)&(M2_STATE'=Winner)&(validatorID'=-1)&(created2'=true);
  	[] (M2_STATE=Start) & (!(validatorID=2))  -> 1 : (M2_STATE'=Lost);
  	[] (M2_STATE=Start)&(!isEmpty(listCheckpoints2)) -> rC :  (lastCheck2'=extractCheckpoint(listCheckpoints2,lastCheck2))&(heightLast2'=getHeight(extractCheckpoint(listCheckpoints2,lastCheck2)))&(votes2'=calcVotes(voti,extractCheckpoint(listCheckpoints2,lastCheck2)))&(M2_STATE'=Check);

  	[addBlock2] (M2_STATE=Winner) -> rMw + delayTAtt: (B2'=addBlock(B2,b2))&(M2_STATE'=(mod(getHeight(b2),EpochSize)=0)?Vote:Start)&(height2'=getHeight(b2))&(created2'=true);
	//[] (created2=true) -> (created2'=false);
  	[] (M2_STATE=Lost)&(!isEmpty(set2)) -> 1 : (b2'=extractBlock(set2))&(M2_STATE'=Move);
  	[] (M2_STATE=Lost)&(isEmpty(set2)) -> 1 : (M2_STATE'=Start);

  	[extractBlock2] (M2_STATE=Move)&(canBeInserted(B2,b2)) -> 1:(B2'=addBlock(B2,b2))&(M2_STATE'=((mod(getHeight(b2),EpochSize)=0)&(getHeight(b2)>maxHeight2))?Vote:Start);
  	[] (M2_STATE=Move)&(!canBeInserted(B2,b2)) -> rIst:(M2_STATE'=Start);

  	[voteBlock2] (M2_STATE=Vote) -> 1 : (maxHeight2'=getHeight(b2))&(listCheckpoints2'=addBlockSet(listCheckpoints2,b2))&(M2_STATE'=Start);

  	[] (M2_STATE=Check)&(votes2>=2/3*tot_stake)&(heightLast2=heightCheckpoint2+EpochSize) -> rIst : (numFinBlocks2'=numFinBlocks2+1)&(lastFinalized2'=lastJustified2)&(lastJustified2'=lastCheck2)&(succAttack2'=((!lastCheck2)=true)?true:false)&(heightCheckpoint2'=heightLast2)&(listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(B2'=updateHF(B2,lastJustified2))&(M2_STATE'=Fin)&(tmp2'=0)&(justified2'=true)&(finalized2'=true) & (finCount'= finCount +1);

	[] (M2_STATE=Check)&(votes2>=2/3*tot_stake)&(heightLast2!=heightCheckpoint2+EpochSize)&(heightLast2>heightCheckpoint2) -> rIst : (lastJustified2'=lastCheck2)&(heightCheckpoint2'=heightLast2)&(succAttack2'=((!lastCheck2)=true)?true:false)&(listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(M2_STATE'=Start)&(tmp2'=0)&(B2'=updateJust(B2,lastJustified2))&(justified2'=true);
	[] (M2_STATE=Check)&((votes2<=2/3*tot_stake)&(heightLast2<=heightCheckpoint2)|((votes2>=2/3*tot_stake)&(heightLast2<=heightCheckpoint2))) -> rIst: (listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(M2_STATE'=Start)&(tmp2'=0);
	[] (M2_STATE=Check)&(votes2<=2/3*tot_stake)&(heightLast2>heightCheckpoint2) -> rIst: (M2_STATE'=Start)&(tmp2'=0);
	[finBlock2] (M2_STATE=Fin) -> 1:(finalized2'=false)&(justified2'=false)&(M2_STATE'=Start)&(created2'=false);

endmodule

module Validator3

	M3_STATE : [Start..Fin] init Start;
	b3 : block {m3,0;genesis,0};
	B3 : blockchain [{genesis,0;genesis,0}];
	c3 : [0..N] init 0;
	tmp3 : [0..3] init 0;
	votes3 : [0..1000] init 0;
	height3 : [0..N] init 0;
	lastFinalized3 : block {genesis,0;genesis,0};
	lastJustified3 : block {genesis,0;genesis,0};
  	lastCheck3 : block {genesis,0;genesis,0};
	heightCheckpoint3 : [0..N] init 0;
  	heightLast3 : [0..N] init 0;
	listCheckpoints3 : list [];
	lenListCheck3 : [0..N] init 0;
	numFinBlocks3 : [0..N] init 0;
	finalized3 : bool init false;
	created3 : bool init false;
	justified3 : bool init false;
	succAttack3 : bool init false;
    	maxHeight3 : [0..N] init 0;

  	[] (M3_STATE=Start)&((validatorID=3) | (validatorID=0)) -> 1 : (b3'=createB(lastJustified3,B3,c3))&(c3'=c3+1)&(M3_STATE'=Winner)&(validatorID'=-1)&(created3'=true);
  	[] (M3_STATE=Start) & (!(validatorID=3)) -> 1 : (M3_STATE'=Lost);
  	[] (M3_STATE=Start)&(!isEmpty(listCheckpoints3)) -> rC :  (lastCheck3'=extractCheckpoint(listCheckpoints3,lastCheck3))&(heightLast3'=getHeight(extractCheckpoint(listCheckpoints3,lastCheck3)))&(votes3'=calcVotes(voti,extractCheckpoint(listCheckpoints3,lastCheck3)))&(M3_STATE'=Check);

  	[addBlock3] (M3_STATE=Winner) -> rMw: (B3'=addBlock(B3,b3))&(M3_STATE'=(mod(getHeight(b3),EpochSize)=0)?Vote:Start)&(height3'=getHeight(b3))&(created3'=true);
	//[] (created3=true) -> (created3'=false);
  	[] (M3_STATE=Lost)&(!isEmpty(set3)) -> 1 : (b3'=extractBlock(set3))&(M3_STATE'=Move);
  	[] (M3_STATE=Lost)&(isEmpty(set3)) -> 1 : (M3_STATE'=Start);

  	[extractBlock3] (M3_STATE=Move)&(canBeInserted(B3,b3)) -> 1:(B3'=addBlock(B3,b3))&(M3_STATE'=((mod(getHeight(b3),EpochSize)=0)&(getHeight(b3)>maxHeight3))?Vote:Start);
  	[] (M3_STATE=Move)&(!canBeInserted(B3,b3)) -> rIst:(M3_STATE'=Start);

  	[voteBlock3] (M3_STATE=Vote) -> 1 : (maxHeight3'=getHeight(b3))&(listCheckpoints3'=addBlockSet(listCheckpoints3,b3))&(M3_STATE'=Start);

  	[] (M3_STATE=Check)&(votes3>=2/3*tot_stake)&(heightLast3=heightCheckpoint3+EpochSize) -> rIst : (numFinBlocks3'=numFinBlocks3+1)&(lastFinalized3'=lastJustified3)&(lastJustified3'=lastCheck3)&(succAttack3'=((!lastCheck3)=true)?true:false)&(heightCheckpoint3'=heightLast3)&(listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(B3'=updateHF(B3,lastJustified3))&(M3_STATE'=Fin)&(tmp3'=0)&(justified3'=true)&(finalized3'=true) & (finCount'= finCount +1);

	[] (M3_STATE=Check)&(votes3>=2/3*tot_stake)&(heightLast3!=heightCheckpoint3+EpochSize)&(heightLast3>heightCheckpoint3) -> rIst : (lastJustified3'=lastCheck3)&(heightCheckpoint3'=heightLast3)&(succAttack3'=((!lastCheck3)=true)?true:false)&(listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(M3_STATE'=Start)&(tmp3'=0)&(B3'=updateJust(B3,lastJustified3))&(justified3'=true);
	[] (M3_STATE=Check)&((votes3<=2/3*tot_stake)&(heightLast3<=heightCheckpoint3)|((votes3>=2/3*tot_stake)&(heightLast3<=heightCheckpoint3))) -> rIst: (listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(M3_STATE'=Start)&(tmp3'=0);
	[] (M3_STATE=Check)&(votes3<=2/3*tot_stake)&(heightLast3>heightCheckpoint3) -> rIst: (M3_STATE'=Start)&(tmp3'=0);
	[finBlock3] (M3_STATE=Fin) -> 1:(finalized3'=false)&(justified3'=false)&(M3_STATE'=Start)&(created3'=false);

endmodule

module Validator4

	M4_STATE : [Start..Fin] init Start;
	b4 : block {m4,0;genesis,0};
	B4 : blockchain [{genesis,0;genesis,0}];
	c4 : [0..N] init 0;
	tmp4 : [0..3] init 0;
	votes4 : [0..1000] init 0;
	height4 : [0..N] init 0;
	lastFinalized4 : block {genesis,0;genesis,0};
	lastJustified4 : block {genesis,0;genesis,0};
  	lastCheck4 : block {genesis,0;genesis,0};
	heightCheckpoint4 : [0..N] init 0;
  	heightLast4 : [0..N] init 0;
	listCheckpoints4 : list [];
	lenListCheck4 : [0..N] init 0;
	numFinBlocks4 : [0..N] init 0;
	finalized4 : bool init false;
	created4 : bool init false;
	justified4 : bool init false;
	succAttack4 : bool init false;
    	maxHeight4 : [0..N] init 0;

  	[] (M4_STATE=Start)&((validatorID=4)|(validatorID=1))  -> 1 : (b4'=createB(lastJustified4,B4,c4))&(c4'=c4+1)&(M4_STATE'=Winner)&(validatorID'=-1)&(created4'=true);
  	[] (M4_STATE=Start) & (!(validatorID=4))  -> 1 : (M4_STATE'=Lost);
  	[] (M4_STATE=Start)&(!isEmpty(listCheckpoints4)) -> rC :  (lastCheck4'=extractCheckpoint(listCheckpoints4,lastCheck4))&(heightLast4'=getHeight(extractCheckpoint(listCheckpoints4,lastCheck4)))&(votes4'=calcVotes(voti,extractCheckpoint(listCheckpoints4,lastCheck4)))&(M4_STATE'=Check);

  	[addBlock4] (M4_STATE=Winner) -> rMw: (B4'=addBlock(B4,b4))&(M4_STATE'=(mod(getHeight(b4),EpochSize)=0)?Vote:Start)&(height4'=getHeight(b4))&(created4'=true);
	//[] (created4=true) -> (created4'=false);
  	[] (M4_STATE=Lost)&(!isEmpty(set4)) -> 1 : (b4'=extractBlock(set4))&(M4_STATE'=Move);
  	[] (M4_STATE=Lost)&(isEmpty(set4)) -> 1 : (M4_STATE'=Start);

  	[extractBlock4] (M4_STATE=Move)&(canBeInserted(B4,b4)) -> 1:(B4'=addBlock(B4,b4))&(M4_STATE'=((mod(getHeight(b4),EpochSize)=0)&(getHeight(b4)>maxHeight4))?Vote:Start);
  	[] (M4_STATE=Move)&(!canBeInserted(B4,b4)) -> rIst:(M4_STATE'=Start);

  	[voteBlock4] (M4_STATE=Vote) -> 1 : (maxHeight4'=getHeight(b4))&(listCheckpoints4'=addBlockSet(listCheckpoints4,b4))&(M4_STATE'=Start);

  	[] (M4_STATE=Check)&(votes4>=2/3*tot_stake)&(heightLast4=heightCheckpoint4+EpochSize) -> rIst : (numFinBlocks4'=numFinBlocks4+1)&(lastFinalized4'=lastJustified4)&(lastJustified4'=lastCheck4)&(succAttack4'=((!lastCheck4)=true)?true:false)&(heightCheckpoint4'=heightLast4)&(listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(B4'=updateHF(B4,lastJustified4))&(M4_STATE'=Fin)&(tmp4'=0)&(justified4'=true)&(finalized4'=true) & (finCount'= finCount +1);

	[] (M4_STATE=Check)&(votes4>=2/3*tot_stake)&(heightLast4!=heightCheckpoint4+EpochSize)&(heightLast4>heightCheckpoint4) -> rIst : (lastJustified4'=lastCheck4)&(heightCheckpoint4'=heightLast4)&(succAttack4'=((!lastCheck4)=true)?true:false)&(listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(M4_STATE'=Start)&(tmp4'=0)&(B4'=updateJust(B4,lastJustified4))&(justified4'=true);
	[] (M4_STATE=Check)&((votes4<=2/3*tot_stake)&(heightLast4<=heightCheckpoint4)|((votes4>=2/3*tot_stake)&(heightLast4<=heightCheckpoint4))) -> rIst: (listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(M4_STATE'=Start)&(tmp4'=0);
	[] (M4_STATE=Check)&(votes4<=2/3*tot_stake)&(heightLast4>heightCheckpoint4) -> rIst: (M4_STATE'=Start)&(tmp4'=0);
	[finBlock4] (M4_STATE=Fin) -> 1:(finalized4'=false)&(justified4'=false)&(M4_STATE'=Start)&(created4'=false);

endmodule

module Validator5

	M5_STATE : [Start..Fin] init Start;
	b5 : block {m5,0;genesis,0};
	B5 : blockchain [{genesis,0;genesis,0}];
	c5 : [0..N] init 0;
	tmp5 : [0..3] init 0;
	votes5 : [0..1000] init 0;
	height5 : [0..N] init 0;
	lastFinalized5 : block {genesis,0;genesis,0};
	lastJustified5 : block {genesis,0;genesis,0};
  	lastCheck5 : block {genesis,0;genesis,0};
	heightCheckpoint5 : [0..N] init 0;
  	heightLast5 : [0..N] init 0;
	listCheckpoints5 : list [];
	lenListCheck5 : [0..N] init 0;
	numFinBlocks5 : [0..N] init 0;
	finalized5 : bool init false;
	created5 : bool init false;
	justified5 : bool init false;
	succAttack5 : bool init false;
    	maxHeight5 : [0..N] init 0;

  	[] (M5_STATE=Start) & ((validatorID=5) |(validatorID=2)) -> 1: (b5'=createB(lastJustified5,B5,c5))&(c5'=c5+1)&(M5_STATE'=Winner)&(validatorID'=-1)&(created5'=true);
  	[] (M5_STATE=Start) & (!(validatorID=5))  -> 1 : (M5_STATE'=Lost);
  	[] (M5_STATE=Start)&(!isEmpty(listCheckpoints5)) -> rC :  (lastCheck5'=extractCheckpoint(listCheckpoints5,lastCheck5))&(heightLast5'=getHeight(extractCheckpoint(listCheckpoints5,lastCheck5)))&(votes5'=calcVotes(voti,extractCheckpoint(listCheckpoints5,lastCheck5)))&(M5_STATE'=Check);

  	[addBlock5] (M5_STATE=Winner) -> rMw: (B5'=addBlock(B5,b5))&(M5_STATE'=(mod(getHeight(b5),EpochSize)=0)?Vote:Start)&(height5'=getHeight(b5))&(created5'=true);
	//[] (created5=true) -> (created5'=false);
  	[] (M5_STATE=Lost)&(!isEmpty(set5)) -> 1 : (b5'=extractBlock(set5))&(M5_STATE'=Move);
  	[] (M5_STATE=Lost)&(isEmpty(set5)) -> 1 : (M5_STATE'=Start);

  	[extractBlock5] (M5_STATE=Move)&(canBeInserted(B5,b5)) -> 1:(B5'=addBlock(B5,b5))&(M5_STATE'=((mod(getHeight(b5),EpochSize)=0)&(getHeight(b5)>maxHeight5))?Vote:Start);
  	[] (M5_STATE=Move)&(!canBeInserted(B5,b5)) -> rIst:(M5_STATE'=Start);

  	[voteBlock5] (M5_STATE=Vote) -> 1 : (maxHeight5'=getHeight(b5))&(listCheckpoints5'=addBlockSet(listCheckpoints5,b5))&(M5_STATE'=Start);

  	[] (M5_STATE=Check)&(votes5>=2/3*tot_stake)&(heightLast5=heightCheckpoint5+EpochSize) -> rIst : (numFinBlocks5'=numFinBlocks5+1)&(lastFinalized5'=lastJustified5)&(lastJustified5'=lastCheck5)&(succAttack5'=((!lastCheck5)=true)?true:false)&(heightCheckpoint5'=heightLast5)&(listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(B5'=updateHF(B5,lastJustified5))&(M5_STATE'=Fin)&(tmp5'=0)&(justified5'=true)&(finalized5'=true) & (finCount'= finCount +1);

	[] (M5_STATE=Check)&(votes5>=2/3*tot_stake)&(heightLast5!=heightCheckpoint5+EpochSize)&(heightLast5>heightCheckpoint5) -> rIst : (lastJustified5'=lastCheck5)&(heightCheckpoint5'=heightLast5)&(succAttack5'=((!lastCheck5)=true)?true:false)&(listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(M5_STATE'=Start)&(tmp5'=0)&(B5'=updateJust(B5,lastJustified5))&(justified5'=true);
	[] (M5_STATE=Check)&((votes5<=2/3*tot_stake)&(heightLast5<=heightCheckpoint5)|((votes5>=2/3*tot_stake)&(heightLast5<=heightCheckpoint5))) -> rIst: (listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(M5_STATE'=Start)&(tmp5'=0);
	[] (M5_STATE=Check)&(votes5<=2/3*tot_stake)&(heightLast5>heightCheckpoint5) -> rIst: (M5_STATE'=Start)&(tmp5'=0);
	[finBlock5] (M5_STATE=Fin) -> 1:(finalized5'=false)&(justified5'=false)&(M5_STATE'=Start)&(created5'=false);

endmodule

module Validator6

	M6_STATE : [Start..Fin] init Start;
	b6 : block {m6,0;genesis,0};
	B6 : blockchain [{genesis,0;genesis,0}];
	c6 : [0..N] init 0;
	tmp6 : [0..3] init 0;
	votes6 : [0..1000] init 0;
	height6 : [0..N] init 0;
	lastFinalized6 : block {genesis,0;genesis,0};
	lastJustified6 : block {genesis,0;genesis,0};
  	lastCheck6 : block {genesis,0;genesis,0};
	heightCheckpoint6 : [0..N] init 0;
  	heightLast6 : [0..N] init 0;
	listCheckpoints6 : list [];
	lenListCheck6 : [0..N] init 0;
	numFinBlocks6 : [0..N] init 0;
	finalized6 : bool init false;
	created6 : bool init false;
	justified6 : bool init false;
	succAttack6 : bool init false;
   maxHeight6 : [0..N] init 0;

  	[] (M6_STATE=Start)&(validatorID=6)  -> 1+ delayTAtt : (b6'=createB(lastJustified6,B6,c6))&(c6'=c6+1)&(M6_STATE'=Winner)&(validatorID'=-1)&(created6'=true);
  	[] (M6_STATE=Start)& (!(validatorID=6)) -> 1 : (M6_STATE'=Lost);
  	[] (M6_STATE=Start)&(!isEmpty(listCheckpoints6)) -> rC :  (lastCheck6'=extractCheckpoint(listCheckpoints6,lastCheck6))&(heightLast6'=getHeight(extractCheckpoint(listCheckpoints6,lastCheck6)))&(votes6'=calcVotes(voti,extractCheckpoint(listCheckpoints6,lastCheck6)))&(M6_STATE'=Check);

  	[addBlock6] (M6_STATE=Winner) -> rMw+delayTAtt: (B6'=addBlock(B6,b6))&(M6_STATE'=(mod(getHeight(b6),EpochSize)=0)?Vote:Start)&(height6'=getHeight(b6))&(created6'=true);
	//[] (created6=true) -> (created6'=false);
  	[] (M6_STATE=Lost)&(!isEmpty(set6)) -> 1 : (b6'=extractBlock(set6))&(M6_STATE'=Move);
  	[] (M6_STATE=Lost)&(isEmpty(set6)) -> 1 : (M6_STATE'=Start);

  	[extractBlock6] (M6_STATE=Move)&(canBeInserted(B6,b6)) -> 1:(B6'=addBlock(B6,b6))&(M6_STATE'=((mod(getHeight(b6),EpochSize)=6)&(getHeight(b6)>maxHeight6))?Vote:Start);
		[extractBlock6] (M6_STATE=Move)&(canBeInserted(B6,b6)) -> 1/penality:(B6'=addBlock(B6,b6))&(M6_STATE'=((mod(getHeight(b6),EpochSize)=0))?Vote:Start);

		[] (M6_STATE=Move)&(!canBeInserted(B6,b6)) -> rIst:(M6_STATE'=Start);

  	[voteBlock6] (M6_STATE=Vote) -> 1 : (maxHeight6'=getHeight(b6))&(listCheckpoints6'=addBlockSet(listCheckpoints6,b6))&(M6_STATE'=Start);

  	[] (M6_STATE=Check)&(votes6>=2/3*tot_stake)&(heightLast6=heightCheckpoint6+EpochSize) -> rIst : (numFinBlocks6'=numFinBlocks6+1)&(lastFinalized6'=lastJustified6)&(lastJustified6'=lastCheck6)&(succAttack6'=((!lastCheck6)=true)?true:false)&(heightCheckpoint6'=heightLast6)&(listCheckpoints6'=removeBlock(listCheckpoints6,lastCheck6))&(B6'=updateHF(B6,lastJustified6))&(M6_STATE'=Fin)&(tmp6'=0)&(justified6'=true)&(finalized6'=true) & (finCount'= finCount +1);

  	[] (M6_STATE=Check)&(votes6>=2/3*tot_stake)&(heightLast6!=heightCheckpoint6+EpochSize)&(heightLast6>heightCheckpoint6) -> rIst : (lastJustified6'=lastCheck6)&(heightCheckpoint6'=heightLast6)&(succAttack6'=((!lastCheck6)=true)?true:false)&(listCheckpoints6'=removeBlock(listCheckpoints6,lastCheck6))&(M6_STATE'=Start)&(tmp6'=0)&(B6'=updateJust(B6,lastJustified6))&(justified6'=true);
	[] (M6_STATE=Check)&((votes6<=2/3*tot_stake)&(heightLast6<=heightCheckpoint6)|((votes6>=2/3*tot_stake)&(heightLast6<=heightCheckpoint6))) -> rIst: (listCheckpoints6'=removeBlock(listCheckpoints6,lastCheck6))&(M6_STATE'=Start)&(tmp6'=0);
	[] (M6_STATE=Check)&(votes6<=2/3*tot_stake)&(heightLast6>heightCheckpoint6) -> rIst: (M6_STATE'=Start)&(tmp6'=0);
	[finBlock6] (M6_STATE=Fin) -> 1:(finalized6'=false)&(justified6'=false)&(M6_STATE'=Start)&(created6'=false);

endmodule

module Validator7

	M7_STATE : [Start..Fin] init Start;
	b7 : block {m7,0;genesis,0};
	B7 : blockchain [{genesis,0;genesis,0}];
	c7 : [0..N] init 0;
	tmp7 : [0..3] init 0;
	votes7 : [0..1000] init 0;
	height7 : [0..N] init 0;
	lastFinalized7 : block {genesis,0;genesis,0};
	lastJustified7 : block {genesis,0;genesis,0};
  	lastCheck7 : block {genesis,0;genesis,0};
	heightCheckpoint7 : [0..N] init 0;
  	heightLast7 : [0..N] init 0;
	listCheckpoints7 : list [];
	lenListCheck7 : [0..N] init 0;
	numFinBlocks7 : [0..N] init 0;
	finalized7 : bool init false;
	created7 : bool init false;
	justified7 : bool init false;
	succAttack7 : bool init false;
   maxHeight7 : [0..N] init 0;

  	[] (M7_STATE=Start)&(validatorID=7)  -> 1+ delayTAtt : (b7'=createB(lastJustified7,B7,c7))&(c7'=c7+1)&(M7_STATE'=Winner)&(validatorID'=-1)&(created7'=true);
  	[] (M7_STATE=Start)& (!(validatorID=7)) -> 1 : (M7_STATE'=Lost);
  	[] (M7_STATE=Start)&(!isEmpty(listCheckpoints7)) -> rC :  (lastCheck7'=extractCheckpoint(listCheckpoints7,lastCheck7))&(heightLast7'=getHeight(extractCheckpoint(listCheckpoints7,lastCheck7)))&(votes7'=calcVotes(voti,extractCheckpoint(listCheckpoints7,lastCheck7)))&(M7_STATE'=Check);

  	[addBlock7] (M7_STATE=Winner) -> rMw+delayTAtt: (B7'=addBlock(B7,b7))&(M7_STATE'=(mod(getHeight(b7),EpochSize)=0)?Vote:Start)&(height7'=getHeight(b7))&(created7'=true);
	//[] (created7=true) -> (created7'=false);
  	[] (M7_STATE=Lost)&(!isEmpty(set7)) -> 1 : (b7'=extractBlock(set7))&(M7_STATE'=Move);
  	[] (M7_STATE=Lost)&(isEmpty(set7)) -> 1 : (M7_STATE'=Start);

  	[extractBlock7] (M7_STATE=Move)&(canBeInserted(B7,b7)) -> 1:(B7'=addBlock(B7,b7))&(M7_STATE'=((mod(getHeight(b7),EpochSize)=0)&(getHeight(b7)>maxHeight7))?Vote:Start);
	[extractBlock7] (M7_STATE=Move)&(canBeInserted(B7,b7)) -> 1/penality:(B7'=addBlock(B7,b7))&(M7_STATE'=((mod(getHeight(b7),EpochSize)=0))?Vote:Start);

		[] (M7_STATE=Move)&(!canBeInserted(B7,b7)) -> rIst:(M7_STATE'=Start);

  	[voteBlock7] (M7_STATE=Vote) -> 1 : (maxHeight7'=getHeight(b7))&(listCheckpoints7'=addBlockSet(listCheckpoints7,b7))&(M7_STATE'=Start);

  	[] (M7_STATE=Check)&(votes7>=2/3*tot_stake)&(heightLast7=heightCheckpoint7+EpochSize) -> rIst : (numFinBlocks7'=numFinBlocks7+1)&(lastFinalized7'=lastJustified7)&(lastJustified7'=lastCheck7)&(succAttack7'=((!lastCheck7)=true)?true:false)&(heightCheckpoint7'=heightLast7)&(listCheckpoints7'=removeBlock(listCheckpoints7,lastCheck7))&(B7'=updateHF(B7,lastJustified7))&(M7_STATE'=Fin)&(tmp7'=0)&(justified7'=true)&(finalized7'=true) & (finCount'= finCount +1);

  	[] (M7_STATE=Check)&(votes7>=2/3*tot_stake)&(heightLast7!=heightCheckpoint7+EpochSize)&(heightLast7>heightCheckpoint7) -> rIst : (lastJustified7'=lastCheck7)&(heightCheckpoint7'=heightLast7)&(succAttack7'=((!lastCheck7)=true)?true:false)&(listCheckpoints7'=removeBlock(listCheckpoints7,lastCheck7))&(M7_STATE'=Start)&(tmp7'=0)&(B7'=updateJust(B7,lastJustified7))&(justified7'=true);
	[] (M7_STATE=Check)&((votes7<=2/3*tot_stake)&(heightLast7<=heightCheckpoint7)|((votes7>=2/3*tot_stake)&(heightLast7<=heightCheckpoint7))) -> rIst: (listCheckpoints7'=removeBlock(listCheckpoints7,lastCheck7))&(M7_STATE'=Start)&(tmp7'=0);
	[] (M7_STATE=Check)&(votes7<=2/3*tot_stake)&(heightLast7>heightCheckpoint7) -> rIst: (M7_STATE'=Start)&(tmp7'=0);
	[finBlock7] (M7_STATE=Fin) -> 1:(finalized7'=false)&(justified7'=false)&(M7_STATE'=Start)&(created7'=false);

endmodule

module Validator8

	M8_STATE : [Start..Fin] init Start;
	b8 : block {m8,0;genesis,0};
	B8 : blockchain [{genesis,0;genesis,0}];
	c8 : [0..N] init 0;
	tmp8 : [0..3] init 0;
	votes8 : [0..1000] init 0;
	height8 : [0..N] init 0;
	lastFinalized8 : block {genesis,0;genesis,0};
	lastJustified8 : block {genesis,0;genesis,0};
  	lastCheck8 : block {genesis,0;genesis,0};
	heightCheckpoint8 : [0..N] init 0;
  	heightLast8 : [0..N] init 0;
	listCheckpoints8 : list [];
	lenListCheck8 : [0..N] init 0;
	numFinBlocks8 : [0..N] init 0;
	finalized8 : bool init false;
	created8 : bool init false;
	justified8 : bool init false;
	succAttack8 : bool init false;
   maxHeight8 : [0..N] init 0;

  	[] (M8_STATE=Start)&(validatorID=8)  -> 1+ delayTAtt : (b8'=createB(lastJustified8,B8,c8))&(c8'=c8+1)&(M8_STATE'=Winner)&(validatorID'=-1)&(created8'=true);
  	[] (M8_STATE=Start)& (!(validatorID=8)) -> 1 : (M8_STATE'=Lost);
  	[] (M8_STATE=Start)&(!isEmpty(listCheckpoints8)) -> rC :  (lastCheck8'=extractCheckpoint(listCheckpoints8,lastCheck8))&(heightLast8'=getHeight(extractCheckpoint(listCheckpoints8,lastCheck8)))&(votes8'=calcVotes(voti,extractCheckpoint(listCheckpoints8,lastCheck8)))&(M8_STATE'=Check);

  	[addBlock8] (M8_STATE=Winner) -> rMw+delayTAtt: (B8'=addBlock(B8,b8))&(M8_STATE'=(mod(getHeight(b8),EpochSize)=0)?Vote:Start)&(height8'=getHeight(b8))&(created8'=true);
	//[] (created8=true) -> (created8'=false);
  	[] (M8_STATE=Lost)&(!isEmpty(set8)) -> 1 : (b8'=extractBlock(set8))&(M8_STATE'=Move);
  	[] (M8_STATE=Lost)&(isEmpty(set8)) -> 1 : (M8_STATE'=Start);

  	[extractBlock8] (M8_STATE=Move)&(canBeInserted(B8,b8)) -> 1:(B8'=addBlock(B8,b8))&(M8_STATE'=((mod(getHeight(b8),EpochSize)=0)&(getHeight(b8)>maxHeight8))?Vote:Start);
	[extractBlock8] (M8_STATE=Move)&(canBeInserted(B8,b8)) -> 1/penality:(B8'=addBlock(B8,b8))&(M8_STATE'=((mod(getHeight(b8),EpochSize)=0))?Vote:Start);

		[] (M8_STATE=Move)&(!canBeInserted(B8,b8)) -> rIst:(M8_STATE'=Start);

  	[voteBlock8] (M8_STATE=Vote) -> 1 : (maxHeight8'=getHeight(b8))&(listCheckpoints8'=addBlockSet(listCheckpoints8,b8))&(M8_STATE'=Start);

  	[] (M8_STATE=Check)&(votes8>=2/3*tot_stake)&(heightLast8=heightCheckpoint8+EpochSize) -> rIst : (numFinBlocks8'=numFinBlocks8+1)&(lastFinalized8'=lastJustified8)&(lastJustified8'=lastCheck8)&(succAttack8'=((!lastCheck8)=true)?true:false)&(heightCheckpoint8'=heightLast8)&(listCheckpoints8'=removeBlock(listCheckpoints8,lastCheck8))&(B8'=updateHF(B8,lastJustified8))&(M8_STATE'=Fin)&(tmp8'=0)&(justified8'=true)&(finalized8'=true) & (finCount'= finCount +1);

  	[] (M8_STATE=Check)&(votes8>=2/3*tot_stake)&(heightLast8!=heightCheckpoint8+EpochSize)&(heightLast8>heightCheckpoint8) -> rIst : (lastJustified8'=lastCheck8)&(heightCheckpoint8'=heightLast8)&(succAttack8'=((!lastCheck8)=true)?true:false)&(listCheckpoints8'=removeBlock(listCheckpoints8,lastCheck8))&(M8_STATE'=Start)&(tmp8'=0)&(B8'=updateJust(B8,lastJustified8))&(justified8'=true);
	[] (M8_STATE=Check)&((votes8<=2/3*tot_stake)&(heightLast8<=heightCheckpoint8)|((votes8>=2/3*tot_stake)&(heightLast8<=heightCheckpoint8))) -> rIst: (listCheckpoints8'=removeBlock(listCheckpoints8,lastCheck8))&(M8_STATE'=Start)&(tmp8'=0);
	[] (M8_STATE=Check)&(votes8<=2/3*tot_stake)&(heightLast8>heightCheckpoint8) -> rIst: (M8_STATE'=Start)&(tmp8'=0);
	[finBlock8] (M8_STATE=Fin) -> 1:(finalized8'=false)&(justified8'=false)&(M8_STATE'=Start)&(created8'=false);

endmodule

module Validator9

	M9_STATE : [Start..Fin] init Start;
	b9 : block {m9,0;genesis,0};
	B9 : blockchain [{genesis,0;genesis,0}];
	c9 : [0..N] init 0;
	tmp9 : [0..3] init 0;
	votes9 : [0..1000] init 0;
	height9 : [0..N] init 0;
	lastFinalized9 : block {genesis,0;genesis,0};
	lastJustified9 : block {genesis,0;genesis,0};
  	lastCheck9 : block {genesis,0;genesis,0};
	heightCheckpoint9 : [0..N] init 0;
  	heightLast9 : [0..N] init 0;
	listCheckpoints9 : list [];
	lenListCheck9 : [0..N] init 0;
	numFinBlocks9 : [0..N] init 0;
	finalized9 : bool init false;
	created9 : bool init false;
	justified9 : bool init false;
	succAttack9 : bool init false;
   maxHeight9 : [0..N] init 0;

  	[] (M9_STATE=Start)&(validatorID=9)  -> 1+ delayTAtt : (b9'=createB(lastJustified9,B9,c9))&(c9'=c9+1)&(M9_STATE'=Winner)&(validatorID'=-1)&(created9'=true);
  	[] (M9_STATE=Start)& (!(validatorID=9)) -> 1 : (M9_STATE'=Lost);
  	[] (M9_STATE=Start)&(!isEmpty(listCheckpoints9)) -> rC :  (lastCheck9'=extractCheckpoint(listCheckpoints9,lastCheck9))&(heightLast9'=getHeight(extractCheckpoint(listCheckpoints9,lastCheck9)))&(votes9'=calcVotes(voti,extractCheckpoint(listCheckpoints9,lastCheck9)))&(M9_STATE'=Check);

  	[addBlock9] (M9_STATE=Winner) -> rMw+delayTAtt: (B9'=addBlock(B9,b9))&(M9_STATE'=(mod(getHeight(b9),EpochSize)=0)?Vote:Start)&(height9'=getHeight(b9))&(created9'=true);
	//[] (created9=true) -> (created9'=false);
  	[] (M9_STATE=Lost)&(!isEmpty(set9)) -> 1 : (b9'=extractBlock(set9))&(M9_STATE'=Move);
  	[] (M9_STATE=Lost)&(isEmpty(set9)) -> 1 : (M9_STATE'=Start);

  	[extractBlock9] (M9_STATE=Move)&(canBeInserted(B9,b9)) -> 1:(B9'=addBlock(B9,b9))&(M9_STATE'=((mod(getHeight(b9),EpochSize)=0)&(getHeight(b9)>maxHeight9))?Vote:Start);
	[extractBlock9] (M9_STATE=Move)&(canBeInserted(B9,b9)) -> 1/penality:(B9'=addBlock(B9,b9))&(M9_STATE'=((mod(getHeight(b9),EpochSize)=0))?Vote:Start);

		[] (M9_STATE=Move)&(!canBeInserted(B9,b9)) -> rIst:(M9_STATE'=Start);

  	[voteBlock9] (M9_STATE=Vote) -> 1 : (maxHeight9'=getHeight(b9))&(listCheckpoints9'=addBlockSet(listCheckpoints9,b9))&(M9_STATE'=Start);

  	[] (M9_STATE=Check)&(votes9>=2/3*tot_stake)&(heightLast9=heightCheckpoint9+EpochSize) -> rIst : (numFinBlocks9'=numFinBlocks9+1)&(lastFinalized9'=lastJustified9)&(lastJustified9'=lastCheck9)&(succAttack9'=((!lastCheck9)=true)?true:false)&(heightCheckpoint9'=heightLast9)&(listCheckpoints9'=removeBlock(listCheckpoints9,lastCheck9))&(B9'=updateHF(B9,lastJustified9))&(M9_STATE'=Fin)&(tmp9'=0)&(justified9'=true)&(finalized9'=true) & (finCount'= finCount +1);

  	[] (M9_STATE=Check)&(votes9>=2/3*tot_stake)&(heightLast9!=heightCheckpoint9+EpochSize)&(heightLast9>heightCheckpoint9) -> rIst : (lastJustified9'=lastCheck9)&(heightCheckpoint9'=heightLast9)&(succAttack9'=((!lastCheck9)=true)?true:false)&(listCheckpoints9'=removeBlock(listCheckpoints9,lastCheck9))&(M9_STATE'=Start)&(tmp9'=0)&(B9'=updateJust(B9,lastJustified9))&(justified9'=true);
	[] (M9_STATE=Check)&((votes9<=2/3*tot_stake)&(heightLast9<=heightCheckpoint9)|((votes9>=2/3*tot_stake)&(heightLast9<=heightCheckpoint9))) -> rIst: (listCheckpoints9'=removeBlock(listCheckpoints9,lastCheck9))&(M9_STATE'=Start)&(tmp9'=0);
	[] (M9_STATE=Check)&(votes9<=2/3*tot_stake)&(heightLast9>heightCheckpoint9) -> rIst: (M9_STATE'=Start)&(tmp9'=0);
	[finBlock9] (M9_STATE=Fin) -> 1:(finalized9'=false)&(justified9'=false)&(M9_STATE'=Start)&(created9'=false);

endmodule

module Validator10

	M10_STATE : [Start..Fin] init Start;
	b10 : block {m10,0;genesis,0};
	B10 : blockchain [{genesis,0;genesis,0}];
	c10 : [0..N] init 0;
	tmp10 : [0..3] init 0;
	votes10 : [0..1000] init 0;
	height10 : [0..N] init 0;
	lastFinalized10 : block {genesis,0;genesis,0};
	lastJustified10 : block {genesis,0;genesis,0};
  	lastCheck10 : block {genesis,0;genesis,0};
	heightCheckpoint10 : [0..N] init 0;
  	heightLast10 : [0..N] init 0;
	listCheckpoints10 : list [];
	lenListCheck10 : [0..N] init 0;
	numFinBlocks10 : [0..N] init 0;
	finalized10 : bool init false;
	created10 : bool init false;
	justified10 : bool init false;
	succAttack10 : bool init false;
   maxHeight10 : [0..N] init 0;

  	[] (M10_STATE=Start)&(validatorID=10)  -> 1+ delayTAtt : (b10'=createB(lastJustified10,B10,c10))&(c10'=c10+1)&(M10_STATE'=Winner)&(validatorID'=-1)&(created10'=true);
  	[] (M10_STATE=Start)& (!(validatorID=10)) -> 1 : (M10_STATE'=Lost);
  	[] (M10_STATE=Start)&(!isEmpty(listCheckpoints10)) -> rC :  (lastCheck10'=extractCheckpoint(listCheckpoints10,lastCheck10))&(heightLast10'=getHeight(extractCheckpoint(listCheckpoints10,lastCheck10)))&(votes10'=calcVotes(voti,extractCheckpoint(listCheckpoints10,lastCheck10)))&(M10_STATE'=Check);

  	[addBlock10] (M10_STATE=Winner) -> rMw+delayTAtt: (B10'=addBlock(B10,b10))&(M10_STATE'=(mod(getHeight(b10),EpochSize)=0)?Vote:Start)&(height10'=getHeight(b10))&(created10'=true);
	//[] (created10=true) -> (created10'=false);
  	[] (M10_STATE=Lost)&(!isEmpty(set10)) -> 1 : (b10'=extractBlock(set10))&(M10_STATE'=Move);
  	[] (M10_STATE=Lost)&(isEmpty(set10)) -> 1 : (M10_STATE'=Start);

  	[extractBlock10] (M10_STATE=Move)&(canBeInserted(B10,b10)) -> 1:(B10'=addBlock(B10,b10))&(M10_STATE'=((mod(getHeight(b10),EpochSize)=0)&(getHeight(b10)>maxHeight10))?Vote:Start);
	[extractBlock10] (M10_STATE=Move)&(canBeInserted(B10,b10)) -> 1/penality:(B10'=addBlock(B10,b10))&(M10_STATE'=((mod(getHeight(b10),EpochSize)=0))?Vote:Start);

		[] (M10_STATE=Move)&(!canBeInserted(B10,b10)) -> rIst:(M10_STATE'=Start);

  	[voteBlock10] (M10_STATE=Vote) -> 1 : (maxHeight10'=getHeight(b10))&(listCheckpoints10'=addBlockSet(listCheckpoints10,b10))&(M10_STATE'=Start);

  	[] (M10_STATE=Check)&(votes10>=2/3*tot_stake)&(heightLast10=heightCheckpoint10+EpochSize) -> rIst : (numFinBlocks10'=numFinBlocks10+1)&(lastFinalized10'=lastJustified10)&(lastJustified10'=lastCheck10)&(succAttack10'=((!lastCheck10)=true)?true:false)&(heightCheckpoint10'=heightLast10)&(listCheckpoints10'=removeBlock(listCheckpoints10,lastCheck10))&(B10'=updateHF(B10,lastJustified10))&(M10_STATE'=Fin)&(tmp10'=0)&(justified10'=true)&(finalized10'=true) & (finCount'= finCount +1);

  	[] (M10_STATE=Check)&(votes10>=2/3*tot_stake)&(heightLast10!=heightCheckpoint10+EpochSize)&(heightLast10>heightCheckpoint10) -> rIst : (lastJustified10'=lastCheck10)&(heightCheckpoint10'=heightLast10)&(succAttack10'=((!lastCheck10)=true)?true:false)&(listCheckpoints10'=removeBlock(listCheckpoints10,lastCheck10))&(M10_STATE'=Start)&(tmp10'=0)&(B10'=updateJust(B10,lastJustified10))&(justified10'=true);
	[] (M10_STATE=Check)&((votes10<=2/3*tot_stake)&(heightLast10<=heightCheckpoint10)|((votes10>=2/3*tot_stake)&(heightLast10<=heightCheckpoint10))) -> rIst: (listCheckpoints10'=removeBlock(listCheckpoints10,lastCheck10))&(M10_STATE'=Start)&(tmp10'=0);
	[] (M10_STATE=Check)&(votes10<=2/3*tot_stake)&(heightLast10>heightCheckpoint10) -> rIst: (M10_STATE'=Start)&(tmp10'=0);
	[finBlock10] (M10_STATE=Fin) -> 1:(finalized10'=false)&(justified10'=false)&(M10_STATE'=Start)&(created10'=false);

endmodule

module Validator11

	M11_STATE : [Start..Fin] init Start;
	b11 : block {m11,0;genesis,0};
	B11 : blockchain [{genesis,0;genesis,0}];
	c11 : [0..N] init 0;
	tmp11 : [0..3] init 0;
	votes11 : [0..1000] init 0;
	height11 : [0..N] init 0;
	lastFinalized11 : block {genesis,0;genesis,0};
	lastJustified11 : block {genesis,0;genesis,0};
  	lastCheck11 : block {genesis,0;genesis,0};
	heightCheckpoint11 : [0..N] init 0;
  	heightLast11 : [0..N] init 0;
	listCheckpoints11 : list [];
	lenListCheck11 : [0..N] init 0;
	numFinBlocks11 : [0..N] init 0;
	finalized11 : bool init false;
	created11 : bool init false;
	justified11 : bool init false;
	succAttack11 : bool init false;
   maxHeight11 : [0..N] init 0;

  	[] (M11_STATE=Start)&(validatorID=11)  -> 1+ delayTAtt : (b11'=createB(lastJustified11,B11,c11))&(c11'=c11+1)&(M11_STATE'=Winner)&(validatorID'=-1)&(created11'=true);
  	[] (M11_STATE=Start)& (!(validatorID=11)) -> 1 : (M11_STATE'=Lost);
  	[] (M11_STATE=Start)&(!isEmpty(listCheckpoints11)) -> rC :  (lastCheck11'=extractCheckpoint(listCheckpoints11,lastCheck11))&(heightLast11'=getHeight(extractCheckpoint(listCheckpoints11,lastCheck11)))&(votes11'=calcVotes(voti,extractCheckpoint(listCheckpoints11,lastCheck11)))&(M11_STATE'=Check);

  	[addBlock11] (M11_STATE=Winner) -> rMw+delayTAtt: (B11'=addBlock(B11,b11))&(M11_STATE'=(mod(getHeight(b11),EpochSize)=0)?Vote:Start)&(height11'=getHeight(b11))&(created11'=true);
	//[] (created11=true) -> (created11'=false);
  	[] (M11_STATE=Lost)&(!isEmpty(set11)) -> 1 : (b11'=extractBlock(set11))&(M11_STATE'=Move);
  	[] (M11_STATE=Lost)&(isEmpty(set11)) -> 1 : (M11_STATE'=Start);

  	[extractBlock11] (M11_STATE=Move)&(canBeInserted(B11,b11)) -> 1:(B11'=addBlock(B11,b11))&(M11_STATE'=((mod(getHeight(b11),EpochSize)=0)&(getHeight(b11)>maxHeight11))?Vote:Start);
	[extractBlock11] (M11_STATE=Move)&(canBeInserted(B11,b11)) -> 1/penality:(B11'=addBlock(B11,b11))&(M11_STATE'=((mod(getHeight(b11),EpochSize)=0))?Vote:Start);

		[] (M11_STATE=Move)&(!canBeInserted(B11,b11)) -> rIst:(M11_STATE'=Start);

  	[voteBlock11] (M11_STATE=Vote) -> 1 : (maxHeight11'=getHeight(b11))&(listCheckpoints11'=addBlockSet(listCheckpoints11,b11))&(M11_STATE'=Start);

  	[] (M11_STATE=Check)&(votes11>=2/3*tot_stake)&(heightLast11=heightCheckpoint11+EpochSize) -> rIst : (numFinBlocks11'=numFinBlocks11+1)&(lastFinalized11'=lastJustified11)&(lastJustified11'=lastCheck11)&(succAttack11'=((!lastCheck11)=true)?true:false)&(heightCheckpoint11'=heightLast11)&(listCheckpoints11'=removeBlock(listCheckpoints11,lastCheck11))&(B11'=updateHF(B11,lastJustified11))&(M11_STATE'=Fin)&(tmp11'=0)&(justified11'=true)&(finalized11'=true) & (finCount'= finCount +1);

  	[] (M11_STATE=Check)&(votes11>=2/3*tot_stake)&(heightLast11!=heightCheckpoint11+EpochSize)&(heightLast11>heightCheckpoint11) -> rIst : (lastJustified11'=lastCheck11)&(heightCheckpoint11'=heightLast11)&(succAttack11'=((!lastCheck11)=true)?true:false)&(listCheckpoints11'=removeBlock(listCheckpoints11,lastCheck11))&(M11_STATE'=Start)&(tmp11'=0)&(B11'=updateJust(B11,lastJustified11))&(justified11'=true);
	[] (M11_STATE=Check)&((votes11<=2/3*tot_stake)&(heightLast11<=heightCheckpoint11)|((votes11>=2/3*tot_stake)&(heightLast11<=heightCheckpoint11))) -> rIst: (listCheckpoints11'=removeBlock(listCheckpoints11,lastCheck11))&(M11_STATE'=Start)&(tmp11'=0);
	[] (M11_STATE=Check)&(votes11<=2/3*tot_stake)&(heightLast11>heightCheckpoint11) -> rIst: (M11_STATE'=Start)&(tmp11'=0);
	[finBlock11] (M11_STATE=Fin) -> 1:(finalized11'=false)&(justified11'=false)&(M11_STATE'=Start)&(created11'=false);

endmodule

module Validator12

	M12_STATE : [Start..Fin] init Start;
	b12 : block {m12,0;genesis,0};
	B12 : blockchain [{genesis,0;genesis,0}];
	c12 : [0..N] init 0;
	tmp12 : [0..3] init 0;
	votes12 : [0..1000] init 0;
	height12 : [0..N] init 0;
	lastFinalized12 : block {genesis,0;genesis,0};
	lastJustified12 : block {genesis,0;genesis,0};
  	lastCheck12 : block {genesis,0;genesis,0};
	heightCheckpoint12 : [0..N] init 0;
  	heightLast12 : [0..N] init 0;
	listCheckpoints12 : list [];
	lenListCheck12 : [0..N] init 0;
	numFinBlocks12 : [0..N] init 0;
	finalized12 : bool init false;
	created12 : bool init false;
	justified12 : bool init false;
	succAttack12 : bool init false;
   maxHeight12 : [0..N] init 0;

  	[] (M12_STATE=Start)&(validatorID=12)  -> 1+ delayTAtt : (b12'=createB(lastJustified12,B12,c12))&(c12'=c12+1)&(M12_STATE'=Winner)&(validatorID'=-1)&(created12'=true);
  	[] (M12_STATE=Start)& (!(validatorID=12)) -> 1 : (M12_STATE'=Lost);
  	[] (M12_STATE=Start)&(!isEmpty(listCheckpoints12)) -> rC :  (lastCheck12'=extractCheckpoint(listCheckpoints12,lastCheck12))&(heightLast12'=getHeight(extractCheckpoint(listCheckpoints12,lastCheck12)))&(votes12'=calcVotes(voti,extractCheckpoint(listCheckpoints12,lastCheck12)))&(M12_STATE'=Check);

  	[addBlock12] (M12_STATE=Winner) -> rMw+delayTAtt: (B12'=addBlock(B12,b12))&(M12_STATE'=(mod(getHeight(b12),EpochSize)=0)?Vote:Start)&(height12'=getHeight(b12))&(created12'=true);
	//[] (created12=true) -> (created12'=false);
  	[] (M12_STATE=Lost)&(!isEmpty(set12)) -> 1 : (b12'=extractBlock(set12))&(M12_STATE'=Move);
  	[] (M12_STATE=Lost)&(isEmpty(set12)) -> 1 : (M12_STATE'=Start);

  	[extractBlock12] (M12_STATE=Move)&(canBeInserted(B12,b12)) -> 1:(B12'=addBlock(B12,b12))&(M12_STATE'=((mod(getHeight(b12),EpochSize)=0)&(getHeight(b12)>maxHeight12))?Vote:Start);
	[extractBlock12] (M12_STATE=Move)&(canBeInserted(B12,b12)) -> 1/penality:(B12'=addBlock(B12,b12))&(M12_STATE'=((mod(getHeight(b12),EpochSize)=0))?Vote:Start);

		[] (M12_STATE=Move)&(!canBeInserted(B12,b12)) -> rIst:(M12_STATE'=Start);

  	[voteBlock12] (M12_STATE=Vote) -> 1 : (maxHeight12'=getHeight(b12))&(listCheckpoints12'=addBlockSet(listCheckpoints12,b12))&(M12_STATE'=Start);

  	[] (M12_STATE=Check)&(votes12>=2/3*tot_stake)&(heightLast12=heightCheckpoint12+EpochSize) -> rIst : (numFinBlocks12'=numFinBlocks12+1)&(lastFinalized12'=lastJustified12)&(lastJustified12'=lastCheck12)&(succAttack12'=((!lastCheck12)=true)?true:false)&(heightCheckpoint12'=heightLast12)&(listCheckpoints12'=removeBlock(listCheckpoints12,lastCheck12))&(B12'=updateHF(B12,lastJustified12))&(M12_STATE'=Fin)&(tmp12'=0)&(justified12'=true)&(finalized12'=true) & (finCount'= finCount +1);

  	[] (M12_STATE=Check)&(votes12>=2/3*tot_stake)&(heightLast12!=heightCheckpoint12+EpochSize)&(heightLast12>heightCheckpoint12) -> rIst : (lastJustified12'=lastCheck12)&(heightCheckpoint12'=heightLast12)&(succAttack12'=((!lastCheck12)=true)?true:false)&(listCheckpoints12'=removeBlock(listCheckpoints12,lastCheck12))&(M12_STATE'=Start)&(tmp12'=0)&(B12'=updateJust(B12,lastJustified12))&(justified12'=true);
	[] (M12_STATE=Check)&((votes12<=2/3*tot_stake)&(heightLast12<=heightCheckpoint12)|((votes12>=2/3*tot_stake)&(heightLast12<=heightCheckpoint12))) -> rIst: (listCheckpoints12'=removeBlock(listCheckpoints12,lastCheck12))&(M12_STATE'=Start)&(tmp12'=0);
	[] (M12_STATE=Check)&(votes12<=2/3*tot_stake)&(heightLast12>heightCheckpoint12) -> rIst: (M12_STATE'=Start)&(tmp12'=0);
	[finBlock12] (M12_STATE=Fin) -> 1:(finalized12'=false)&(justified12'=false)&(M12_STATE'=Start)&(created12'=false);

endmodule

module Validator13

	M13_STATE : [Start..Fin] init Start;
	b13 : block {m13,0;genesis,0};
	B13 : blockchain [{genesis,0;genesis,0}];
	c13 : [0..N] init 0;
	tmp13 : [0..3] init 0;
	votes13 : [0..1000] init 0;
	height13 : [0..N] init 0;
	lastFinalized13 : block {genesis,0;genesis,0};
	lastJustified13 : block {genesis,0;genesis,0};
  	lastCheck13 : block {genesis,0;genesis,0};
	heightCheckpoint13 : [0..N] init 0;
  	heightLast13 : [0..N] init 0;
	listCheckpoints13 : list [];
	lenListCheck13 : [0..N] init 0;
	numFinBlocks13 : [0..N] init 0;
	finalized13 : bool init false;
	created13 : bool init false;
	justified13 : bool init false;
	succAttack13 : bool init false;
   maxHeight13 : [0..N] init 0;

  	[] (M13_STATE=Start)&(validatorID=13)  -> 1+ delayTAtt : (b13'=createB(lastJustified13,B13,c13))&(c13'=c13+1)&(M13_STATE'=Winner)&(validatorID'=-1)&(created13'=true);
  	[] (M13_STATE=Start)& (!(validatorID=13)) -> 1 : (M13_STATE'=Lost);
  	[] (M13_STATE=Start)&(!isEmpty(listCheckpoints13)) -> rC :  (lastCheck13'=extractCheckpoint(listCheckpoints13,lastCheck13))&(heightLast13'=getHeight(extractCheckpoint(listCheckpoints13,lastCheck13)))&(votes13'=calcVotes(voti,extractCheckpoint(listCheckpoints13,lastCheck13)))&(M13_STATE'=Check);

  	[addBlock13] (M13_STATE=Winner) -> rMw+delayTAtt: (B13'=addBlock(B13,b13))&(M13_STATE'=(mod(getHeight(b13),EpochSize)=0)?Vote:Start)&(height13'=getHeight(b13))&(created13'=true);
	//[] (created13=true) -> (created13'=false);
  	[] (M13_STATE=Lost)&(!isEmpty(set13)) -> 1 : (b13'=extractBlock(set13))&(M13_STATE'=Move);
  	[] (M13_STATE=Lost)&(isEmpty(set13)) -> 1 : (M13_STATE'=Start);

  	[extractBlock13] (M13_STATE=Move)&(canBeInserted(B13,b13)) -> 1:(B13'=addBlock(B13,b13))&(M13_STATE'=((mod(getHeight(b13),EpochSize)=0)&(getHeight(b13)>maxHeight13))?Vote:Start);
	[extractBlock13] (M13_STATE=Move)&(canBeInserted(B13,b13)) -> 1/penality:(B13'=addBlock(B13,b13))&(M13_STATE'=((mod(getHeight(b13),EpochSize)=0))?Vote:Start);

		[] (M13_STATE=Move)&(!canBeInserted(B13,b13)) -> rIst:(M13_STATE'=Start);

  	[voteBlock13] (M13_STATE=Vote) -> 1 : (maxHeight13'=getHeight(b13))&(listCheckpoints13'=addBlockSet(listCheckpoints13,b13))&(M13_STATE'=Start);

  	[] (M13_STATE=Check)&(votes13>=2/3*tot_stake)&(heightLast13=heightCheckpoint13+EpochSize) -> rIst : (numFinBlocks13'=numFinBlocks13+1)&(lastFinalized13'=lastJustified13)&(lastJustified13'=lastCheck13)&(succAttack13'=((!lastCheck13)=true)?true:false)&(heightCheckpoint13'=heightLast13)&(listCheckpoints13'=removeBlock(listCheckpoints13,lastCheck13))&(B13'=updateHF(B13,lastJustified13))&(M13_STATE'=Fin)&(tmp13'=0)&(justified13'=true)&(finalized13'=true) & (finCount'= finCount +1);

  	[] (M13_STATE=Check)&(votes13>=2/3*tot_stake)&(heightLast13!=heightCheckpoint13+EpochSize)&(heightLast13>heightCheckpoint13) -> rIst : (lastJustified13'=lastCheck13)&(heightCheckpoint13'=heightLast13)&(succAttack13'=((!lastCheck13)=true)?true:false)&(listCheckpoints13'=removeBlock(listCheckpoints13,lastCheck13))&(M13_STATE'=Start)&(tmp13'=0)&(B13'=updateJust(B13,lastJustified13))&(justified13'=true);
	[] (M13_STATE=Check)&((votes13<=2/3*tot_stake)&(heightLast13<=heightCheckpoint13)|((votes13>=2/3*tot_stake)&(heightLast13<=heightCheckpoint13))) -> rIst: (listCheckpoints13'=removeBlock(listCheckpoints13,lastCheck13))&(M13_STATE'=Start)&(tmp13'=0);
	[] (M13_STATE=Check)&(votes13<=2/3*tot_stake)&(heightLast13>heightCheckpoint13) -> rIst: (M13_STATE'=Start)&(tmp13'=0);
	[finBlock13] (M13_STATE=Fin) -> 1:(finalized13'=false)&(justified13'=false)&(M13_STATE'=Start)&(created13'=false);

endmodule

module Validator14

	M14_STATE : [Start..Fin] init Start;
	b14 : block {m14,0;genesis,0};
	B14 : blockchain [{genesis,0;genesis,0}];
	c14 : [0..N] init 0;
	tmp14 : [0..3] init 0;
	votes14 : [0..1000] init 0;
	height14 : [0..N] init 0;
	lastFinalized14 : block {genesis,0;genesis,0};
	lastJustified14 : block {genesis,0;genesis,0};
  	lastCheck14 : block {genesis,0;genesis,0};
	heightCheckpoint14 : [0..N] init 0;
  	heightLast14 : [0..N] init 0;
	listCheckpoints14 : list [];
	lenListCheck14 : [0..N] init 0;
	numFinBlocks14 : [0..N] init 0;
	finalized14 : bool init false;
	created14 : bool init false;
	justified14 : bool init false;
	succAttack14 : bool init false;
   maxHeight14 : [0..N] init 0;

  	[] (M14_STATE=Start)&(validatorID=14)  -> 1+ delayTAtt : (b14'=createB(lastJustified14,B14,c14))&(c14'=c14+1)&(M14_STATE'=Winner)&(validatorID'=-1)&(created14'=true);
  	[] (M14_STATE=Start)& (!(validatorID=14)) -> 1 : (M14_STATE'=Lost);
  	[] (M14_STATE=Start)&(!isEmpty(listCheckpoints14)) -> rC :  (lastCheck14'=extractCheckpoint(listCheckpoints14,lastCheck14))&(heightLast14'=getHeight(extractCheckpoint(listCheckpoints14,lastCheck14)))&(votes14'=calcVotes(voti,extractCheckpoint(listCheckpoints14,lastCheck14)))&(M14_STATE'=Check);

  	[addBlock14] (M14_STATE=Winner) -> rMw+delayTAtt: (B14'=addBlock(B14,b14))&(M14_STATE'=(mod(getHeight(b14),EpochSize)=0)?Vote:Start)&(height14'=getHeight(b14))&(created14'=true);
	//[] (created14=true) -> (created14'=false);
  	[] (M14_STATE=Lost)&(!isEmpty(set14)) -> 1 : (b14'=extractBlock(set14))&(M14_STATE'=Move);
  	[] (M14_STATE=Lost)&(isEmpty(set14)) -> 1 : (M14_STATE'=Start);

  	[extractBlock14] (M14_STATE=Move)&(canBeInserted(B14,b14)) -> 1:(B14'=addBlock(B14,b14))&(M14_STATE'=((mod(getHeight(b14),EpochSize)=0)&(getHeight(b14)>maxHeight14))?Vote:Start);
	[extractBlock14] (M14_STATE=Move)&(canBeInserted(B14,b14)) -> 1/penality:(B14'=addBlock(B14,b14))&(M14_STATE'=((mod(getHeight(b14),EpochSize)=0))?Vote:Start);

		[] (M14_STATE=Move)&(!canBeInserted(B14,b14)) -> rIst:(M14_STATE'=Start);

  	[voteBlock14] (M14_STATE=Vote) -> 1 : (maxHeight14'=getHeight(b14))&(listCheckpoints14'=addBlockSet(listCheckpoints14,b14))&(M14_STATE'=Start);

  	[] (M14_STATE=Check)&(votes14>=2/3*tot_stake)&(heightLast14=heightCheckpoint14+EpochSize) -> rIst : (numFinBlocks14'=numFinBlocks14+1)&(lastFinalized14'=lastJustified14)&(lastJustified14'=lastCheck14)&(succAttack14'=((!lastCheck14)=true)?true:false)&(heightCheckpoint14'=heightLast14)&(listCheckpoints14'=removeBlock(listCheckpoints14,lastCheck14))&(B14'=updateHF(B14,lastJustified14))&(M14_STATE'=Fin)&(tmp14'=0)&(justified14'=true)&(finalized14'=true) & (finCount'= finCount +1);

  	[] (M14_STATE=Check)&(votes14>=2/3*tot_stake)&(heightLast14!=heightCheckpoint14+EpochSize)&(heightLast14>heightCheckpoint14) -> rIst : (lastJustified14'=lastCheck14)&(heightCheckpoint14'=heightLast14)&(succAttack14'=((!lastCheck14)=true)?true:false)&(listCheckpoints14'=removeBlock(listCheckpoints14,lastCheck14))&(M14_STATE'=Start)&(tmp14'=0)&(B14'=updateJust(B14,lastJustified14))&(justified14'=true);
	[] (M14_STATE=Check)&((votes14<=2/3*tot_stake)&(heightLast14<=heightCheckpoint14)|((votes14>=2/3*tot_stake)&(heightLast14<=heightCheckpoint14))) -> rIst: (listCheckpoints14'=removeBlock(listCheckpoints14,lastCheck14))&(M14_STATE'=Start)&(tmp14'=0);
	[] (M14_STATE=Check)&(votes14<=2/3*tot_stake)&(heightLast14>heightCheckpoint14) -> rIst: (M14_STATE'=Start)&(tmp14'=0);
	[finBlock14] (M14_STATE=Fin) -> 1:(finalized14'=false)&(justified14'=false)&(M14_STATE'=Start)&(created14'=false);

endmodule

module Validator15

	M15_STATE : [Start..Fin] init Start;
	b15 : block {m15,0;genesis,0};
	B15 : blockchain [{genesis,0;genesis,0}];
	c15 : [0..N] init 0;
	tmp15 : [0..3] init 0;
	votes15 : [0..1000] init 0;
	height15 : [0..N] init 0;
	lastFinalized15 : block {genesis,0;genesis,0};
	lastJustified15 : block {genesis,0;genesis,0};
  	lastCheck15 : block {genesis,0;genesis,0};
	heightCheckpoint15 : [0..N] init 0;
  	heightLast15 : [0..N] init 0;
	listCheckpoints15 : list [];
	lenListCheck15 : [0..N] init 0;
	numFinBlocks15 : [0..N] init 0;
	finalized15 : bool init false;
	created15 : bool init false;
	justified15 : bool init false;
	succAttack15 : bool init false;
   maxHeight15 : [0..N] init 0;

  	[] (M15_STATE=Start)&(validatorID=15)  -> 1+ delayTAtt : (b15'=createB(lastJustified15,B15,c15))&(c15'=c15+1)&(M15_STATE'=Winner)&(validatorID'=-1)&(created15'=true);
  	[] (M15_STATE=Start)& (!(validatorID=15)) -> 1 : (M15_STATE'=Lost);
  	[] (M15_STATE=Start)&(!isEmpty(listCheckpoints15)) -> rC :  (lastCheck15'=extractCheckpoint(listCheckpoints15,lastCheck15))&(heightLast15'=getHeight(extractCheckpoint(listCheckpoints15,lastCheck15)))&(votes15'=calcVotes(voti,extractCheckpoint(listCheckpoints15,lastCheck15)))&(M15_STATE'=Check);

  	[addBlock15] (M15_STATE=Winner) -> rMw+delayTAtt: (B15'=addBlock(B15,b15))&(M15_STATE'=(mod(getHeight(b15),EpochSize)=0)?Vote:Start)&(height15'=getHeight(b15))&(created15'=true);
	//[] (created15=true) -> (created15'=false);
  	[] (M15_STATE=Lost)&(!isEmpty(set15)) -> 1 : (b15'=extractBlock(set15))&(M15_STATE'=Move);
  	[] (M15_STATE=Lost)&(isEmpty(set15)) -> 1 : (M15_STATE'=Start);

  	[extractBlock15] (M15_STATE=Move)&(canBeInserted(B15,b15)) -> 1:(B15'=addBlock(B15,b15))&(M15_STATE'=((mod(getHeight(b15),EpochSize)=0)&(getHeight(b15)>maxHeight15))?Vote:Start);
	[extractBlock15] (M15_STATE=Move)&(canBeInserted(B15,b15)) -> 1/penality:(B15'=addBlock(B15,b15))&(M15_STATE'=((mod(getHeight(b15),EpochSize)=0))?Vote:Start);

		[] (M15_STATE=Move)&(!canBeInserted(B15,b15)) -> rIst:(M15_STATE'=Start);

  	[voteBlock15] (M15_STATE=Vote) -> 1 : (maxHeight15'=getHeight(b15))&(listCheckpoints15'=addBlockSet(listCheckpoints15,b15))&(M15_STATE'=Start);

  	[] (M15_STATE=Check)&(votes15>=2/3*tot_stake)&(heightLast15=heightCheckpoint15+EpochSize) -> rIst : (numFinBlocks15'=numFinBlocks15+1)&(lastFinalized15'=lastJustified15)&(lastJustified15'=lastCheck15)&(succAttack15'=((!lastCheck15)=true)?true:false)&(heightCheckpoint15'=heightLast15)&(listCheckpoints15'=removeBlock(listCheckpoints15,lastCheck15))&(B15'=updateHF(B15,lastJustified15))&(M15_STATE'=Fin)&(tmp15'=0)&(justified15'=true)&(finalized15'=true) & (finCount'= finCount +1);

  	[] (M15_STATE=Check)&(votes15>=2/3*tot_stake)&(heightLast15!=heightCheckpoint15+EpochSize)&(heightLast15>heightCheckpoint15) -> rIst : (lastJustified15'=lastCheck15)&(heightCheckpoint15'=heightLast15)&(succAttack15'=((!lastCheck15)=true)?true:false)&(listCheckpoints15'=removeBlock(listCheckpoints15,lastCheck15))&(M15_STATE'=Start)&(tmp15'=0)&(B15'=updateJust(B15,lastJustified15))&(justified15'=true);
	[] (M15_STATE=Check)&((votes15<=2/3*tot_stake)&(heightLast15<=heightCheckpoint15)|((votes15>=2/3*tot_stake)&(heightLast15<=heightCheckpoint15))) -> rIst: (listCheckpoints15'=removeBlock(listCheckpoints15,lastCheck15))&(M15_STATE'=Start)&(tmp15'=0);
	[] (M15_STATE=Check)&(votes15<=2/3*tot_stake)&(heightLast15>heightCheckpoint15) -> rIst: (M15_STATE'=Start)&(tmp15'=0);
	[finBlock15] (M15_STATE=Fin) -> 1:(finalized15'=false)&(justified15'=false)&(M15_STATE'=Start)&(created15'=false);

endmodule



module Updater

    Updater_STATE : [0..1] init 0;
    n_epochs : [2..N] init 2;
    tot_stake : [0..50000] init 512;
    voti : hash [];
    maxHeight : [0..5000] init 0;

    tmpUp0 : [0..1] init 0;
    reward0 : [0..N] init 0;
    stake0 : [0..N] init 32;

    tmpUp1 : [0..1] init 0;
    reward1 : [0..N] init 0;
    stake1 : [0..N] init 32;

    tmpUp2 : [0..1] init 0;
    reward2 : [0..N] init 0;
    stake2 : [0..N] init 32;

    tmpUp3 : [0..1] init 0;
    reward3 : [0..N] init 0;
    stake3 : [0..N] init 32;

    tmpUp4 : [0..1] init 0;
    reward4 : [0..N] init 0;
    stake4 : [0..N] init 32;

    tmpUp5 : [0..1] init 0;
    reward5 : [0..N] init 0;
    stake5 : [0..N] init 32;
	
	 tmpUp6 : [0..1] init 0;
    reward6 : [0..N] init 0;
    stake6 : [0..N] init 32;

	  tmpUp7 : [0..1] init 0;
    reward7 : [0..N] init 0;
    stake7 : [0..N] init 32;

	  tmpUp8 : [0..1] init 0;
    reward8 : [0..N] init 0;
    stake8 : [0..N] init 32;

	  tmpUp9 : [0..1] init 0;
    reward9 : [0..N] init 0;
    stake9 : [0..N] init 32;

	  tmpUp10 : [0..1] init 0;
    reward10 : [0..N] init 0;
    stake10 : [0..N] init 32;

	  tmpUp11 : [0..1] init 0;
    reward11 : [0..N] init 0;
    stake11 : [0..N] init 32;

	  tmpUp12 : [0..1] init 0;
    reward12 : [0..N] init 0;
    stake12 : [0..N] init 32;

	  tmpUp13 : [0..1] init 0;
    reward13 : [0..N] init 0;
    stake13 : [0..N] init 32;

	  tmpUp14 : [0..1] init 0;
    reward14 : [0..N] init 0;
    stake14 : [0..N] init 32;

	  tmpUp15 : [0..1] init 0;
    reward15 : [0..N] init 0;
    stake15 : [0..N] init 32;
		
     

    [voteBlock0] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b0,stake0));

    [finBlock0] (Updater_STATE=0)&(getHeight(lastFinalized0)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));
    [finBlock0] (Updater_STATE=0)&(getHeight(lastFinalized0)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock1] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b1,stake1));

    [finBlock1] (Updater_STATE=0)&(getHeight(lastFinalized1)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
	 [finBlock1] (Updater_STATE=0)&(getHeight(lastFinalized1)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock2] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b2,stake2));

    [finBlock2] (Updater_STATE=0)&(getHeight(lastFinalized2)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock2] (Updater_STATE=0)&(getHeight(lastFinalized2)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock3] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b3,stake3));

    [finBlock3] (Updater_STATE=0)&(getHeight(lastFinalized3)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock3] (Updater_STATE=0)&(getHeight(lastFinalized3)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock4] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b4,stake4));

    [finBlock4] (Updater_STATE=0)&(getHeight(lastFinalized4)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock4] (Updater_STATE=0)&(getHeight(lastFinalized4)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock5] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b5,stake5));

    [finBlock5] (Updater_STATE=0)&(getHeight(lastFinalized5)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock5] (Updater_STATE=0)&(getHeight(lastFinalized5)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock6] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b6,stake6));

    [finBlock6] (Updater_STATE=0)&(getHeight(lastFinalized6)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized6,(getHeight(lastFinalized6)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock6] (Updater_STATE=0)&(getHeight(lastFinalized6)<=maxHeight) -> 1 : (Updater_STATE'=0);
	 
	 [voteBlock6] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b6,stake6));

    [finBlock7] (Updater_STATE=0)&(getHeight(lastFinalized7)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized7,(getHeight(lastFinalized7)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock7] (Updater_STATE=0)&(getHeight(lastFinalized7)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock8] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b8,stake8));

    [finBlock8] (Updater_STATE=0)&(getHeight(lastFinalized8)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized8,(getHeight(lastFinalized8)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock8] (Updater_STATE=0)&(getHeight(lastFinalized8)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock9] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b9,stake9));

    [finBlock9] (Updater_STATE=0)&(getHeight(lastFinalized9)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized9,(getHeight(lastFinalized9)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    
    [finBlock9] (Updater_STATE=0)&(getHeight(lastFinalized9)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock10] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b10,stake10));

    [finBlock10] (Updater_STATE=0)&(getHeight(lastFinalized10)>maxHeight) -> 1 : (stake0'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized10,(getHeight(lastFinalized10)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

    [finBlock10] (Updater_STATE=0)&(getHeight(lastFinalized10)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock11] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b11,stake11));

    [finBlock11] (Updater_STATE=0)&(getHeight(lastFinalized11)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized11,(getHeight(lastFinalized11)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

    [finBlock11] (Updater_STATE=0)&(getHeight(lastFinalized11)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock12] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b12,stake12));

    [finBlock12] (Updater_STATE=0)&(getHeight(lastFinalized12)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized12,(getHeight(lastFinalized12)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

    [finBlock12] (Updater_STATE=0)&(getHeight(lastFinalized12)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock13] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b13,stake13));

    [finBlock13] (Updater_STATE=0)&(getHeight(lastFinalized13)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized13,(getHeight(lastFinalized13)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

   [finBlock13] (Updater_STATE=0)&(getHeight(lastFinalized13)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock14] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b14,stake14));

    [finBlock14] (Updater_STATE=0)&(getHeight(lastFinalized14)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized14,(getHeight(lastFinalized14)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

    [finBlock14] (Updater_STATE=0)&(getHeight(lastFinalized14)<=maxHeight) -> 1 : (Updater_STATE'=0);

	 [voteBlock15] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b15,stake15));

    [finBlock15] (Updater_STATE=0)&(getHeight(lastFinalized15)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake)) & (stake6'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake6,tot_stake)) & (stake7'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake7,tot_stake))& (stake8'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake8,tot_stake))& (stake9'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake9,tot_stake))& (stake10'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake10,tot_stake))& (stake11'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake11,tot_stake))& (stake12'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake12,tot_stake))& (stake13'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake13,tot_stake))& (stake14'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake14,tot_stake))& (stake15'=updateStake(voti,lastFinalized15,(getHeight(lastFinalized15)+EpochSize)/EpochSize-maxHeight/EpochSize,stake15,tot_stake));    

    [finBlock15] (Updater_STATE=0)&(getHeight(lastFinalized15)<=maxHeight) -> 1 : (Updater_STATE'=0);
    

endmodule


module Network

    Network_STATE : [0..2] init 0;

    set0 : list [];
    lenGlobal0 : [0..N] init 0;

    set1 : list [];
    lenGlobal1 : [0..N] init 0;

    set2 : list [];
    lenGlobal2 : [0..N] init 0;

    set3 : list [];
    lenGlobal3 : [0..N] init 0;

    set4 : list [];
    lenGlobal4 : [0..N] init 0;

    set5 : list [];
    lenGlobal5 : [0..N] init 0;

	  set6 : list [];
    lenGlobal6 : [0..N] init 0;
	 
	  set7 : list [];
    lenGlobal7 : [0..N] init 0;

	  set8 : list [];
    lenGlobal8 : [0..N] init 0;

	  set9 : list [];
    lenGlobal9 : [0..N] init 0;

	  set10 : list [];
    lenGlobal10 : [0..N] init 0;

	  set11 : list [];
    lenGlobal11 : [0..N] init 0;

	  set12 : list [];
    lenGlobal12 : [0..N] init 0;

	  set13 : list [];
    lenGlobal13 : [0..N] init 0;

	  set14 : list [];
    lenGlobal14 : [0..N] init 0;

	  set15 : list [];
    lenGlobal15 : [0..N] init 0;
   

    [addBlock0] (M0_STATE=Winner)  -> rAdd : (set1'=addBlockSet(set1,b0))&(set2'=addBlockSet(set2,b0))&(set3'=addBlockSet(set3,b0))&(set4'=addBlockSet(set4,b0))&(set5'=addBlockSet(set5,b0))&(set6'=addBlockSet(set6,b0))&(set7'=addBlockSet(set7,b0))&(set8'=addBlockSet(set8,b0))&(set9'=addBlockSet(set9,b0))&(set10'=addBlockSet(set10,b0))&(set11'=addBlockSet(set11,b0))&(set12'=addBlockSet(set12,b0))&(set13'=addBlockSet(set13,b0))&(set14'=addBlockSet(set14,b0))&(set15'=addBlockSet(set15,b0));
    [extractBlock0] (M0_STATE=Move) -> r : (set0'=removeBlock(set0,b0));

    [addBlock1] (M1_STATE=Winner)  -> rAdd :(set0'=addBlockSet(set0,b1))&(set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&(set4'=addBlockSet(set4,b1))&(set5'=addBlockSet(set5,b1))&(set6'=addBlockSet(set6,b1))&(set7'=addBlockSet(set7,b1))&(set8'=addBlockSet(set8,b1))&(set9'=addBlockSet(set9,b1))&(set10'=addBlockSet(set10,b1))&(set11'=addBlockSet(set11,b1))&(set12'=addBlockSet(set12,b1))&(set13'=addBlockSet(set13,b1))&(set14'=addBlockSet(set14,b1))&(set15'=addBlockSet(set15,b1));
    [extractBlock1] (M1_STATE=Move) -> r : (set1'=removeBlock(set1,b1));

    [addBlock2] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b2))&(set1'=addBlockSet(set1,b2))&(set3'=addBlockSet(set3,b2))&(set4'=addBlockSet(set4,b2))&(set5'=addBlockSet(set5,b2))&(set6'=addBlockSet(set6,b2))&(set7'=addBlockSet(set7,b2))&(set8'=addBlockSet(set8,b2))&(set9'=addBlockSet(set9,b2))&(set10'=addBlockSet(set10,b2))&(set11'=addBlockSet(set11,b2))&(set12'=addBlockSet(set12,b2))&(set13'=addBlockSet(set13,b2))&(set14'=addBlockSet(set14,b2))&(set15'=addBlockSet(set15,b2));
    [extractBlock2] (M2_STATE=Move) -> r : (set2'=removeBlock(set2,b2));

    [addBlock3] (M3_STATE=Winner)  -> rAdd :  (set0'=addBlockSet(set0,b3))&(set1'=addBlockSet(set1,b3))&(set2'=addBlockSet(set2,b3))&(set4'=addBlockSet(set4,b3))&(set5'=addBlockSet(set5,b3))&(set6'=addBlockSet(set6,b3))&(set7'=addBlockSet(set7,b3))&(set8'=addBlockSet(set8,b3))&(set9'=addBlockSet(set9,b3))&(set10'=addBlockSet(set10,b3))&(set11'=addBlockSet(set11,b3))&(set12'=addBlockSet(set12,b3))&(set13'=addBlockSet(set13,b3))&(set14'=addBlockSet(set14,b3))&(set15'=addBlockSet(set15,b3));
     [extractBlock3] (M3_STATE=Move) -> r : (set3'=removeBlock(set3,b3));

    [addBlock4] (M4_STATE=Winner)  -> rAdd :  (set0'=addBlockSet(set0,b4))&(set1'=addBlockSet(set1,b4))&(set2'=addBlockSet(set2,b4))&(set3'=addBlockSet(set3,b4))&(set5'=addBlockSet(set5,b4))&(set6'=addBlockSet(set6,b4))&(set7'=addBlockSet(set7,b4))&(set8'=addBlockSet(set8,b4))&(set9'=addBlockSet(set9,b4))&(set10'=addBlockSet(set10,b4))&(set11'=addBlockSet(set11,b4))&(set12'=addBlockSet(set12,b4))&(set13'=addBlockSet(set13,b4))&(set14'=addBlockSet(set14,b4))&(set15'=addBlockSet(set15,b4));
     [extractBlock4] (M4_STATE=Move) -> r : (set4'=removeBlock(set4,b4));

    [addBlock5] (M5_STATE=Winner)  -> rAdd :  (set0'=addBlockSet(set0,b5))&(set1'=addBlockSet(set1,b5))&(set3'=addBlockSet(set3,b5))&(set4'=addBlockSet(set4,b5))&(set2'=addBlockSet(set2,b5))&(set6'=addBlockSet(set6,b5))&(set7'=addBlockSet(set7,b5))&(set8'=addBlockSet(set8,b5))&(set9'=addBlockSet(set9,b5))&(set10'=addBlockSet(set10,b5))&(set11'=addBlockSet(set11,b5))&(set12'=addBlockSet(set12,b5))&(set13'=addBlockSet(set13,b5))&(set14'=addBlockSet(set14,b5))&(set15'=addBlockSet(set15,b5));
     [extractBlock5] (M5_STATE=Move) -> r : (set5'=removeBlock(set5,b5));

	[addBlock6] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b6))&(set1'=addBlockSet(set1,b6))&(set3'=addBlockSet(set3,b6))&(set4'=addBlockSet(set4,b6))&(set5'=addBlockSet(set5,b6))&(set2'=addBlockSet(set2,b6))&(set7'=addBlockSet(set7,b6))&(set8'=addBlockSet(set8,b6))&(set9'=addBlockSet(set9,b6))&(set10'=addBlockSet(set10,b6))&(set11'=addBlockSet(set11,b6))&(set12'=addBlockSet(set12,b6))&(set13'=addBlockSet(set13,b6))&(set14'=addBlockSet(set14,b6))&(set15'=addBlockSet(set15,b6));
    [extractBlock6] (M2_STATE=Move) -> r : (set6'=removeBlock(set6,b6));

	 [addBlock7] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b7))&(set1'=addBlockSet(set1,b7))&(set3'=addBlockSet(set3,b7))&(set4'=addBlockSet(set4,b7))&(set5'=addBlockSet(set5,b7))&(set6'=addBlockSet(set6,b7))&(set2'=addBlockSet(set2,b7))&(set8'=addBlockSet(set8,b7))&(set9'=addBlockSet(set9,b7))&(set10'=addBlockSet(set10,b7))&(set11'=addBlockSet(set11,b7))&(set12'=addBlockSet(set12,b7))&(set13'=addBlockSet(set13,b7))&(set14'=addBlockSet(set14,b7))&(set15'=addBlockSet(set15,b7));
    [extractBlock7] (M2_STATE=Move) -> r : (set7'=removeBlock(set7,b7));

	 [addBlock8] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b8))&(set1'=addBlockSet(set1,b8))&(set3'=addBlockSet(set3,b8))&(set4'=addBlockSet(set4,b8))&(set5'=addBlockSet(set5,b8))&(set6'=addBlockSet(set6,b8))&(set7'=addBlockSet(set7,b8))&(set2'=addBlockSet(set2,b8))&(set9'=addBlockSet(set9,b8))&(set10'=addBlockSet(set10,b8))&(set11'=addBlockSet(set11,b8))&(set12'=addBlockSet(set12,b8))&(set13'=addBlockSet(set13,b8))&(set14'=addBlockSet(set14,b8))&(set15'=addBlockSet(set15,b8));
    [extractBlock8] (M2_STATE=Move) -> r : (set8'=removeBlock(set8,b8));

	 [addBlock9] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b9))&(set1'=addBlockSet(set1,b9))&(set3'=addBlockSet(set3,b9))&(set4'=addBlockSet(set4,b9))&(set5'=addBlockSet(set5,b9))&(set6'=addBlockSet(set6,b9))&(set7'=addBlockSet(set7,b9))&(set8'=addBlockSet(set8,b9))&(set2'=addBlockSet(set2,b9))&(set10'=addBlockSet(set10,b9))&(set11'=addBlockSet(set11,b9))&(set12'=addBlockSet(set12,b9))&(set13'=addBlockSet(set13,b9))&(set14'=addBlockSet(set14,b9))&(set15'=addBlockSet(set15,b9));
    [extractBlock9] (M2_STATE=Move) -> r : (set9'=removeBlock(set9,b9));

	 [addBlock10] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b10))&(set1'=addBlockSet(set1,b10))&(set3'=addBlockSet(set3,b10))&(set4'=addBlockSet(set4,b10))&(set5'=addBlockSet(set5,b10))&(set6'=addBlockSet(set6,b10))&(set7'=addBlockSet(set7,b10))&(set8'=addBlockSet(set8,b10))&(set9'=addBlockSet(set9,b10))&(set2'=addBlockSet(set2,b10))&(set11'=addBlockSet(set11,b10))&(set12'=addBlockSet(set12,b10))&(set13'=addBlockSet(set13,b10))&(set14'=addBlockSet(set14,b10))&(set15'=addBlockSet(set15,b10));
    [extractBlock10] (M2_STATE=Move) -> r : (set10'=removeBlock(set10,b10));

	 [addBlock11] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b11))&(set1'=addBlockSet(set1,b11))&(set3'=addBlockSet(set3,b11))&(set4'=addBlockSet(set4,b11))&(set5'=addBlockSet(set5,b11))&(set6'=addBlockSet(set6,b11))&(set7'=addBlockSet(set7,b11))&(set8'=addBlockSet(set8,b11))&(set9'=addBlockSet(set9,b11))&(set10'=addBlockSet(set10,b11))&(set2'=addBlockSet(set2,b11))&(set12'=addBlockSet(set12,b11))&(set13'=addBlockSet(set13,b11))&(set14'=addBlockSet(set14,b11))&(set15'=addBlockSet(set15,b11));
    [extractBlock11] (M2_STATE=Move) -> r : (set11'=removeBlock(set11,b11));

	 [addBlock12] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b12))&(set1'=addBlockSet(set1,b12))&(set3'=addBlockSet(set3,b12))&(set4'=addBlockSet(set4,b12))&(set5'=addBlockSet(set5,b12))&(set6'=addBlockSet(set6,b12))&(set7'=addBlockSet(set7,b12))&(set8'=addBlockSet(set8,b12))&(set9'=addBlockSet(set9,b12))&(set10'=addBlockSet(set10,b12))&(set11'=addBlockSet(set11,b12))&(set2'=addBlockSet(set2,b12))&(set13'=addBlockSet(set13,b12))&(set14'=addBlockSet(set14,b12))&(set15'=addBlockSet(set15,b12));
    [extractBlock12] (M2_STATE=Move) -> r : (set12'=removeBlock(set12,b12));

	 [addBlock13] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b13))&(set1'=addBlockSet(set1,b13))&(set3'=addBlockSet(set3,b13))&(set4'=addBlockSet(set4,b13))&(set5'=addBlockSet(set5,b13))&(set6'=addBlockSet(set6,b13))&(set7'=addBlockSet(set7,b13))&(set8'=addBlockSet(set8,b13))&(set9'=addBlockSet(set9,b13))&(set10'=addBlockSet(set10,b13))&(set11'=addBlockSet(set11,b13))&(set12'=addBlockSet(set12,b13))&(set2'=addBlockSet(set2,b13))&(set14'=addBlockSet(set14,b13))&(set15'=addBlockSet(set15,b13));
    [extractBlock13] (M2_STATE=Move) -> r : (set13'=removeBlock(set13,b13));

	 [addBlock14] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b14))&(set1'=addBlockSet(set1,b14))&(set3'=addBlockSet(set3,b14))&(set4'=addBlockSet(set4,b14))&(set5'=addBlockSet(set5,b14))&(set6'=addBlockSet(set6,b14))&(set7'=addBlockSet(set7,b14))&(set8'=addBlockSet(set8,b14))&(set9'=addBlockSet(set9,b14))&(set10'=addBlockSet(set10,b14))&(set11'=addBlockSet(set11,b14))&(set12'=addBlockSet(set12,b14))&(set13'=addBlockSet(set13,b14))&(set2'=addBlockSet(set2,b14))&(set15'=addBlockSet(set15,b14));
    [extractBlock14] (M2_STATE=Move) -> r : (set14'=removeBlock(set14,b14));

	 [addBlock15] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b15))&(set1'=addBlockSet(set1,b15))&(set3'=addBlockSet(set3,b15))&(set4'=addBlockSet(set4,b15))&(set5'=addBlockSet(set5,b15))&(set6'=addBlockSet(set6,b15))&(set7'=addBlockSet(set7,b15))&(set8'=addBlockSet(set8,b15))&(set9'=addBlockSet(set9,b15))&(set10'=addBlockSet(set10,b15))&(set11'=addBlockSet(set11,b15))&(set12'=addBlockSet(set12,b15))&(set13'=addBlockSet(set13,b15))&(set14'=addBlockSet(set14,b15))&(set2'=addBlockSet(set2,b15));
    [extractBlock15] (M2_STATE=Move) -> r : (set15'=removeBlock(set15,b15));

endmodule

module Global

	diff : [0..N] init 0;
	kLength : bool init false;
	
	finalizationIncrease : bool init false;

	[] (M0_STATE = Move) | (M1_STATE = Move) | (M2_STATE = Move) | (M3_STATE = Move) | (M4_STATE = Move) | (M5_STATE = Move) -> 1 : (diff'=calculateFork(B0,B1,B2,B3,B4,B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15));
	//[] (M0_STATE = Start) | (M1_STATE = Start) | (M2_STATE = Start) | (M3_STATE = Start) | (M4_STATE = Start) | (M5_STATE = Start) -> 1 : (diff'=calculateFork(B0,B1,B2,B3,B4,B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15));
	[] (diff>0) & (diff=K) -> 1 :(kLength' = true);
	[] (diff>0) & (kLength = true) -> 1 : (kLength' = false);
	[] (finalized0 = true | finalized1 = true | finalized2 = true | finalized3 = true | finalized4 = true | finalized5 = true  | finalized6 = true  | finalized7 = true  | finalized8 = true  | finalized9 = true  | finalized10 = true  | finalized11 = true | finalized12 = true | finalized13 = true | finalized14 = true | finalized15 = true) & (finCount = oldFinCount) -> 1 : (finCount'=finCount+1);
	[] (finCount > oldFinCount) -> 1 : (finalizationIncrease' = true) & (oldFinCount' = finCount);

	

endmodule
	
	



const int validator_count = 16;

global validatorID : int init -1;
global newRandao: bool init true;

module Randao
	
	ValidatorB0: int init -1;
	ValidatorB1: int init -1;
	ValidatorB2: int init -1;
	ValidatorB3: int init -1;
	ValidatorB4: int init -1;
	ValidatorB5: int init -1;
	ValidatorB6: int init -1;
	ValidatorB7: int init -1;
	ValidatorB8: int init -1;
	ValidatorB9: int init -1;
	ValidatorB10: int init -1;
	ValidatorB11: int init -1;
	ValidatorB12: int init -1;
	ValidatorB13: int init -1;
	ValidatorB14: int init -1;
	ValidatorB15: int init -1;
	ValidatorB16: int init -1;
	ValidatorB17: int init -1;
	ValidatorB18: int init -1;
	ValidatorB19: int init -1;
	ValidatorB20: int init -1;
	ValidatorB21: int init -1;
	ValidatorB22: int init -1;
	ValidatorB23: int init -1;
	ValidatorB24: int init -1;
	ValidatorB25: int init -1;
	ValidatorB26: int init -1;
	ValidatorB27: int init -1;
	ValidatorB28: int init -1;
	ValidatorB29: int init -1;
	ValidatorB30: int init -1;
	ValidatorB31: int init -1;
	



	int0 : int init 0;
	int1 : int init 1;
	int2 : int init 2;
	int3 : int init 3;
	int4 : int init 4;
	int5 : int init 5;
	int6 : int init 6;
	int7 : int init 7;
	int8 : int init 8;
	int9 : int init 9;
	int10 : int init 10;
	int11 : int init 11;
	int12 : int init 12;
	int13 : int init 13;
	int14 : int init 14;
	int15 : int init 15;
	
	state : int init 0;
	seed : int init 123;
	



	[] (state=0) -> 1 : (int0'=((stake0>=32)?0:-1))&(int1'=((stake1>=32)?1:-1))&(int2'=((stake2>=32)?2:-1))&
			(int3'=((stake3>=32)?3:-1))&(int4'=((stake4>=32)?4:-1))&(int5'=((stake5>=32)?5:-1))&(int6'=((stake6>=32)?6:-1))&(int7'=((stake7>=32)?7:-1))&(int8'=((stake8>=32)?8:-1))&(int9'=((stake9>=32)?9:-1))&(int10'=((stake10>=32)?10:-1))&(int11'=((stake11>=32)?11:-1))&(int12'=((stake12>=32)?12:-1))&(int13'=((stake13>=32)?13:-1))&(int14'=((stake14>=32)?14:-1))&(int15'=((stake15>=32)?15:-1))&(seed'=seed+1)&(state'=1);

	[] (state=1) -> 1: (ValidatorB0'=randomNumber(seed, 0,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15) )& (ValidatorB1'=randomNumber(seed, 1,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15)) &
		 (ValidatorB2'=randomNumber(seed, 2,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB3'=randomNumber(seed, 3,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB4'=randomNumber(seed, 4,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB5'=randomNumber(seed, 5,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB6'=randomNumber(seed, 6,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB7'=randomNumber(seed, 7,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB8'=randomNumber(seed, 8,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB9'=randomNumber(seed, 9,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB10'=randomNumber(seed, 10,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB11'=randomNumber(seed, 11,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB12'=randomNumber(seed, 12,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB13'=randomNumber(seed, 13,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
                 (ValidatorB14'=randomNumber(seed, 14,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB15'=randomNumber(seed, 15,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB16'=randomNumber(seed, 16,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB17'=randomNumber(seed, 17,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
  		 (ValidatorB18'=randomNumber(seed, 18,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB19'=randomNumber(seed, 19,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
 		 (ValidatorB20'=randomNumber(seed, 20,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB21'=randomNumber(seed, 19,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB22'=randomNumber(seed, 22,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB23'=randomNumber(seed, 23,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB24'=randomNumber(seed, 24,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB25'=randomNumber(seed, 25,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB26'=randomNumber(seed, 26,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB27'=randomNumber(seed, 27,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
		 (ValidatorB28'=randomNumber(seed, 28,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB29'=randomNumber(seed, 29,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& 
 		 (ValidatorB30'=randomNumber(seed, 30,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15))& (ValidatorB31'=randomNumber(seed, 31,int0,int1,int2,int3,int4,int5,int6,int7,int8,int9,int10,int11,int12, int13, int14, int15)) &(newRandao'=false)&(state'=0);
	

	

	
	

	
	
endmodule

module RandaoPSelection 
	
	
	i:[0..32] init 0;
	
	[] (i=0) & (newRandao=false) -> 1 : (validatorID'=ValidatorB0) & (i'=i+1);
	[] (i=1)-> slot : (validatorID'=ValidatorB1) & (i'=i+1);
	[] (i=2)-> slot : (validatorID'=ValidatorB2) & (i'=i+1);
	[] (i=3)-> slot : (validatorID'=ValidatorB3) & (i'=i+1);
	[] (i=4)-> slot : (validatorID'=ValidatorB4) & (i'=i+1);
	[] (i=5)-> slot : (validatorID'=ValidatorB5) & (i'=i+1);
	[] (i=6)-> slot : (validatorID'=ValidatorB6) & (i'=i+1);
	[] (i=7)-> slot : (validatorID'=ValidatorB7) & (i'=i+1);
	[] (i=8)-> slot : (validatorID'=ValidatorB8) & (i'=i+1);
	[] (i=9)-> slot : (validatorID'=ValidatorB9) & (i'=i+1);
	[] (i=10)-> slot : (validatorID'=ValidatorB10) & (i'=i+1);
	[] (i=11)-> slot : (validatorID'=ValidatorB11) & (i'=i+1);
	[] (i=12)-> slot : (validatorID'=ValidatorB12) & (i'=i+1);
	[] (i=13)-> slot : (validatorID'=ValidatorB13) & (i'=i+1);
	[] (i=14)-> slot : (validatorID'=ValidatorB14) & (i'=i+1);
	[] (i=15)-> slot : (validatorID'=ValidatorB15) & (i'=i+1);
	[] (i=16)-> slot : (validatorID'=ValidatorB16) & (i'=i+1);
	[] (i=17)-> slot : (validatorID'=ValidatorB17) & (i'=i+1);
	[] (i=18)-> slot : (validatorID'=ValidatorB18) & (i'=i+1);
	[] (i=19)-> slot : (validatorID'=ValidatorB19) & (i'=i+1);
	[] (i=20)-> slot : (validatorID'=ValidatorB20) & (i'=i+1);
	[] (i=21)-> slot : (validatorID'=ValidatorB21) & (i'=i+1);
	[] (i=22)-> slot : (validatorID'=ValidatorB22) & (i'=i+1);
	[] (i=23)-> slot : (validatorID'=ValidatorB23) & (i'=i+1);
	[] (i=24)-> slot : (validatorID'=ValidatorB24) & (i'=i+1);
	[] (i=25)-> slot : (validatorID'=ValidatorB25) & (i'=i+1);
	[] (i=26)-> slot : (validatorID'=ValidatorB26) & (i'=i+1);
	[] (i=27)-> slot : (validatorID'=ValidatorB27) & (i'=i+1);
	[] (i=28)-> slot : (validatorID'=ValidatorB28) & (i'=i+1);
	[] (i=29)-> slot : (validatorID'=ValidatorB29) & (i'=i+1);
	[] (i=30)-> slot : (validatorID'=ValidatorB30) & (i'=i+1);
	[] (i=31)-> slot : (validatorID'=ValidatorB31) & (i'=i+1);
	[] (i>31)-> 1: (i'=0) & (newRandao'=true); 




	

endmodule



label "finInc" = finalizationIncrease = true;

label "equalLength" = kLength = true;

label "winner" = M0_STATE = Winner | M1_STATE = Winner | M2_STATE = Winner |  M3_STATE = Winner |  M4_STATE = Winner |  M5_STATE = Winner |  M6_STATE = Winner|  M7_STATE = Winner|  M8_STATE = Winner|  M9_STATE = Winner|  M10_STATE = Winner|  M11_STATE = Winner|  M12_STATE = Winner|  M13_STATE = Winner|  M14_STATE = Winner|  M15_STATE = Winner;
label "someJustified" = justified0 = true | justified1 = true | justified2 = true | justified3 = true | justified4 = true | justified5 = true | justified6 = true| justified7 = true| justified8 = true| justified9 = true| justified10 = true| justified11 = true| justified12 = true| justified13 = true| justified14 = true| justified15 = true;
label "someFinalized" = finalized0 = true | finalized1 = true | finalized2 = true | finalized3 = true | finalized4 = true | finalized5 = true| finalized6 = true| finalized7 = true| finalized8 = true| finalized9 = true| finalized10 = true| finalized11 = true| finalized12 = true| finalized13 = true| finalized14 = true| finalized15 = true;
label "someCreated" = created0 = true | created1 = true | created2 = true | created3 = true | created4 = true | created5 = true| created6 = true| created7 = true| created8 = true| created9 = true| created10 = true| created11 = true| created12 = true| created13 = true| created14 = true| created15 = true;

label "honestJustified" = justified0=true | justified1=true | justified2=true;
